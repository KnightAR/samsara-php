<?php
/**
 * CreateDvirParam
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * CreateDvirParam Class Doc Comment
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateDvirParam implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'createDvirParam';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inspection_type' => 'string',
        'mechanic_notes' => 'string',
        'odometer_miles' => 'int',
        'previous_defects_corrected' => 'bool',
        'previous_defects_ignored' => 'bool',
        'resolved_defect_ids' => 'int[]',
        'safe' => 'string',
        'trailer_id' => 'int',
        'user_email' => 'string',
        'vehicle_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inspection_type' => null,
        'mechanic_notes' => null,
        'odometer_miles' => null,
        'previous_defects_corrected' => null,
        'previous_defects_ignored' => null,
        'resolved_defect_ids' => 'int64',
        'safe' => null,
        'trailer_id' => null,
        'user_email' => null,
        'vehicle_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inspection_type' => 'inspectionType',
        'mechanic_notes' => 'mechanicNotes',
        'odometer_miles' => 'odometerMiles',
        'previous_defects_corrected' => 'previousDefectsCorrected',
        'previous_defects_ignored' => 'previousDefectsIgnored',
        'resolved_defect_ids' => 'resolvedDefectIds',
        'safe' => 'safe',
        'trailer_id' => 'trailerId',
        'user_email' => 'userEmail',
        'vehicle_id' => 'vehicleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inspection_type' => 'setInspectionType',
        'mechanic_notes' => 'setMechanicNotes',
        'odometer_miles' => 'setOdometerMiles',
        'previous_defects_corrected' => 'setPreviousDefectsCorrected',
        'previous_defects_ignored' => 'setPreviousDefectsIgnored',
        'resolved_defect_ids' => 'setResolvedDefectIds',
        'safe' => 'setSafe',
        'trailer_id' => 'setTrailerId',
        'user_email' => 'setUserEmail',
        'vehicle_id' => 'setVehicleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inspection_type' => 'getInspectionType',
        'mechanic_notes' => 'getMechanicNotes',
        'odometer_miles' => 'getOdometerMiles',
        'previous_defects_corrected' => 'getPreviousDefectsCorrected',
        'previous_defects_ignored' => 'getPreviousDefectsIgnored',
        'resolved_defect_ids' => 'getResolvedDefectIds',
        'safe' => 'getSafe',
        'trailer_id' => 'getTrailerId',
        'user_email' => 'getUserEmail',
        'vehicle_id' => 'getVehicleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const INSPECTION_TYPE_MECHANIC = 'mechanic';
    const SAFE_SAFE = 'safe';
    const SAFE_UNSAFE = 'unsafe';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getInspectionTypeAllowableValues()
    {
        return [
            self::INSPECTION_TYPE_MECHANIC,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSafeAllowableValues()
    {
        return [
            self::SAFE_SAFE,
            self::SAFE_UNSAFE,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inspection_type'] = isset($data['inspection_type']) ? $data['inspection_type'] : null;
        $this->container['mechanic_notes'] = isset($data['mechanic_notes']) ? $data['mechanic_notes'] : null;
        $this->container['odometer_miles'] = isset($data['odometer_miles']) ? $data['odometer_miles'] : null;
        $this->container['previous_defects_corrected'] = isset($data['previous_defects_corrected']) ? $data['previous_defects_corrected'] : null;
        $this->container['previous_defects_ignored'] = isset($data['previous_defects_ignored']) ? $data['previous_defects_ignored'] : null;
        $this->container['resolved_defect_ids'] = isset($data['resolved_defect_ids']) ? $data['resolved_defect_ids'] : null;
        $this->container['safe'] = isset($data['safe']) ? $data['safe'] : null;
        $this->container['trailer_id'] = isset($data['trailer_id']) ? $data['trailer_id'] : null;
        $this->container['user_email'] = isset($data['user_email']) ? $data['user_email'] : null;
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inspection_type'] === null) {
            $invalidProperties[] = "'inspection_type' can't be null";
        }
        $allowedValues = $this->getInspectionTypeAllowableValues();
        if (!is_null($this->container['inspection_type']) && !in_array($this->container['inspection_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'inspection_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['safe'] === null) {
            $invalidProperties[] = "'safe' can't be null";
        }
        $allowedValues = $this->getSafeAllowableValues();
        if (!is_null($this->container['safe']) && !in_array($this->container['safe'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'safe', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_email'] === null) {
            $invalidProperties[] = "'user_email' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inspection_type
     *
     * @return string
     */
    public function getInspectionType()
    {
        return $this->container['inspection_type'];
    }

    /**
     * Sets inspection_type
     *
     * @param string $inspection_type Only type 'mechanic' is currently accepted.
     *
     * @return $this
     */
    public function setInspectionType($inspection_type)
    {
        $allowedValues = $this->getInspectionTypeAllowableValues();
        if (!in_array($inspection_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'inspection_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['inspection_type'] = $inspection_type;

        return $this;
    }

    /**
     * Gets mechanic_notes
     *
     * @return string
     */
    public function getMechanicNotes()
    {
        return $this->container['mechanic_notes'];
    }

    /**
     * Sets mechanic_notes
     *
     * @param string $mechanic_notes Any notes from the mechanic.
     *
     * @return $this
     */
    public function setMechanicNotes($mechanic_notes)
    {
        $this->container['mechanic_notes'] = $mechanic_notes;

        return $this;
    }

    /**
     * Gets odometer_miles
     *
     * @return int
     */
    public function getOdometerMiles()
    {
        return $this->container['odometer_miles'];
    }

    /**
     * Sets odometer_miles
     *
     * @param int $odometer_miles The current odometer of the vehicle.
     *
     * @return $this
     */
    public function setOdometerMiles($odometer_miles)
    {
        $this->container['odometer_miles'] = $odometer_miles;

        return $this;
    }

    /**
     * Gets previous_defects_corrected
     *
     * @return bool
     */
    public function getPreviousDefectsCorrected()
    {
        return $this->container['previous_defects_corrected'];
    }

    /**
     * Sets previous_defects_corrected
     *
     * @param bool $previous_defects_corrected Whether any previous defects were corrected. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
     *
     * @return $this
     */
    public function setPreviousDefectsCorrected($previous_defects_corrected)
    {
        $this->container['previous_defects_corrected'] = $previous_defects_corrected;

        return $this;
    }

    /**
     * Gets previous_defects_ignored
     *
     * @return bool
     */
    public function getPreviousDefectsIgnored()
    {
        return $this->container['previous_defects_ignored'];
    }

    /**
     * Sets previous_defects_ignored
     *
     * @param bool $previous_defects_ignored Whether any previous defects were ignored. If this vehicle or trailer was previously marked unsafe, and this DVIR marks it as safe, either previousDefectsCorrected or previousDefectsIgnored must be true.
     *
     * @return $this
     */
    public function setPreviousDefectsIgnored($previous_defects_ignored)
    {
        $this->container['previous_defects_ignored'] = $previous_defects_ignored;

        return $this;
    }

    /**
     * Gets resolved_defect_ids
     *
     * @return int[]
     */
    public function getResolvedDefectIds()
    {
        return $this->container['resolved_defect_ids'];
    }

    /**
     * Sets resolved_defect_ids
     *
     * @param int[] $resolved_defect_ids List of defect IDs to resolve.  The defects must be associated with the provided vehicle or trailer.
     *
     * @return $this
     */
    public function setResolvedDefectIds($resolved_defect_ids)
    {
        $this->container['resolved_defect_ids'] = $resolved_defect_ids;

        return $this;
    }

    /**
     * Gets safe
     *
     * @return string
     */
    public function getSafe()
    {
        return $this->container['safe'];
    }

    /**
     * Sets safe
     *
     * @param string $safe Whether or not this vehicle or trailer is safe to drive.
     *
     * @return $this
     */
    public function setSafe($safe)
    {
        $allowedValues = $this->getSafeAllowableValues();
        if (!in_array($safe, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'safe', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['safe'] = $safe;

        return $this;
    }

    /**
     * Gets trailer_id
     *
     * @return int
     */
    public function getTrailerId()
    {
        return $this->container['trailer_id'];
    }

    /**
     * Sets trailer_id
     *
     * @param int $trailer_id Id of trailer being inspected. Either vehicleId or trailerId must be provided.
     *
     * @return $this
     */
    public function setTrailerId($trailer_id)
    {
        $this->container['trailer_id'] = $trailer_id;

        return $this;
    }

    /**
     * Gets user_email
     *
     * @return string
     */
    public function getUserEmail()
    {
        return $this->container['user_email'];
    }

    /**
     * Sets user_email
     *
     * @param string $user_email The Samsara login email for the person creating the DVIR. The email must correspond to a Samsara user's email.
     *
     * @return $this
     */
    public function setUserEmail($user_email)
    {
        $this->container['user_email'] = $user_email;

        return $this;
    }

    /**
     * Gets vehicle_id
     *
     * @return int
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param int $vehicle_id Id of vehicle being inspected. Either vehicleId or trailerId must be provided.
     *
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


