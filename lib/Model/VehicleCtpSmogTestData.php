<?php
/**
 * VehicleCtpSmogTestData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * VehicleCtpSmogTestData Class Doc Comment
 *
 * @category Class
 * @description Required data for one CTP smog test.
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VehicleCtpSmogTestData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VehicleCtpSmogTestData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'comm_protocol' => 'string',
        'device_firmware' => 'string',
        'dlc_pin_voltage_milli_volts' => 'int',
        'dlc_pin_voltage_milli_volts_valid' => 'bool',
        'link_id' => 'string',
        'remote_obd_test_records' => '\Samsara\Php\Client\Model\RemoteObdTestRecords[]',
        'test_date_time' => '\Samsara\Php\Client\Model\Time'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'comm_protocol' => null,
        'device_firmware' => null,
        'dlc_pin_voltage_milli_volts' => null,
        'dlc_pin_voltage_milli_volts_valid' => null,
        'link_id' => null,
        'remote_obd_test_records' => null,
        'test_date_time' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'comm_protocol' => 'commProtocol',
        'device_firmware' => 'deviceFirmware',
        'dlc_pin_voltage_milli_volts' => 'dlcPinVoltageMilliVolts',
        'dlc_pin_voltage_milli_volts_valid' => 'dlcPinVoltageMilliVoltsValid',
        'link_id' => 'linkId',
        'remote_obd_test_records' => 'remoteObdTestRecords',
        'test_date_time' => 'testDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'comm_protocol' => 'setCommProtocol',
        'device_firmware' => 'setDeviceFirmware',
        'dlc_pin_voltage_milli_volts' => 'setDlcPinVoltageMilliVolts',
        'dlc_pin_voltage_milli_volts_valid' => 'setDlcPinVoltageMilliVoltsValid',
        'link_id' => 'setLinkId',
        'remote_obd_test_records' => 'setRemoteObdTestRecords',
        'test_date_time' => 'setTestDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'comm_protocol' => 'getCommProtocol',
        'device_firmware' => 'getDeviceFirmware',
        'dlc_pin_voltage_milli_volts' => 'getDlcPinVoltageMilliVolts',
        'dlc_pin_voltage_milli_volts_valid' => 'getDlcPinVoltageMilliVoltsValid',
        'link_id' => 'getLinkId',
        'remote_obd_test_records' => 'getRemoteObdTestRecords',
        'test_date_time' => 'getTestDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const COMM_PROTOCOL_V = 'V';
    const COMM_PROTOCOL_P = 'P';
    const COMM_PROTOCOL_I = 'I';
    const COMM_PROTOCOL_KF = 'Kf';
    const COMM_PROTOCOL_KS = 'Ks';
    const COMM_PROTOCOL_C11 = 'C11';
    const COMM_PROTOCOL_C29 = 'C29';
    const COMM_PROTOCOL_C11S = 'C11s';
    const COMM_PROTOCOL_C29S = 'C29s';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCommProtocolAllowableValues()
    {
        return [
            self::COMM_PROTOCOL_V,
            self::COMM_PROTOCOL_P,
            self::COMM_PROTOCOL_I,
            self::COMM_PROTOCOL_KF,
            self::COMM_PROTOCOL_KS,
            self::COMM_PROTOCOL_C11,
            self::COMM_PROTOCOL_C29,
            self::COMM_PROTOCOL_C11S,
            self::COMM_PROTOCOL_C29S,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['comm_protocol'] = isset($data['comm_protocol']) ? $data['comm_protocol'] : null;
        $this->container['device_firmware'] = isset($data['device_firmware']) ? $data['device_firmware'] : null;
        $this->container['dlc_pin_voltage_milli_volts'] = isset($data['dlc_pin_voltage_milli_volts']) ? $data['dlc_pin_voltage_milli_volts'] : null;
        $this->container['dlc_pin_voltage_milli_volts_valid'] = isset($data['dlc_pin_voltage_milli_volts_valid']) ? $data['dlc_pin_voltage_milli_volts_valid'] : null;
        $this->container['link_id'] = isset($data['link_id']) ? $data['link_id'] : null;
        $this->container['remote_obd_test_records'] = isset($data['remote_obd_test_records']) ? $data['remote_obd_test_records'] : null;
        $this->container['test_date_time'] = isset($data['test_date_time']) ? $data['test_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCommProtocolAllowableValues();
        if (!is_null($this->container['comm_protocol']) && !in_array($this->container['comm_protocol'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'comm_protocol', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets comm_protocol
     *
     * @return string
     */
    public function getCommProtocol()
    {
        return $this->container['comm_protocol'];
    }

    /**
     * Sets comm_protocol
     *
     * @param string $comm_protocol CAN bus communication protocol as detected by the vehicle gateway.
     *
     * @return $this
     */
    public function setCommProtocol($comm_protocol)
    {
        $allowedValues = $this->getCommProtocolAllowableValues();
        if (!is_null($comm_protocol) && !in_array($comm_protocol, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'comm_protocol', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['comm_protocol'] = $comm_protocol;

        return $this;
    }

    /**
     * Gets device_firmware
     *
     * @return string
     */
    public function getDeviceFirmware()
    {
        return $this->container['device_firmware'];
    }

    /**
     * Sets device_firmware
     *
     * @param string $device_firmware CTP firmware version as reported by the vehicle gateway.
     *
     * @return $this
     */
    public function setDeviceFirmware($device_firmware)
    {
        $this->container['device_firmware'] = $device_firmware;

        return $this;
    }

    /**
     * Gets dlc_pin_voltage_milli_volts
     *
     * @return int
     */
    public function getDlcPinVoltageMilliVolts()
    {
        return $this->container['dlc_pin_voltage_milli_volts'];
    }

    /**
     * Sets dlc_pin_voltage_milli_volts
     *
     * @param int $dlc_pin_voltage_milli_volts Positive battery voltage as detected by the vehicle gateway reported in millivolts.
     *
     * @return $this
     */
    public function setDlcPinVoltageMilliVolts($dlc_pin_voltage_milli_volts)
    {
        $this->container['dlc_pin_voltage_milli_volts'] = $dlc_pin_voltage_milli_volts;

        return $this;
    }

    /**
     * Gets dlc_pin_voltage_milli_volts_valid
     *
     * @return bool
     */
    public function getDlcPinVoltageMilliVoltsValid()
    {
        return $this->container['dlc_pin_voltage_milli_volts_valid'];
    }

    /**
     * Sets dlc_pin_voltage_milli_volts_valid
     *
     * @param bool $dlc_pin_voltage_milli_volts_valid Indicates DlcPinVoltageMilliVolts was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setDlcPinVoltageMilliVoltsValid($dlc_pin_voltage_milli_volts_valid)
    {
        $this->container['dlc_pin_voltage_milli_volts_valid'] = $dlc_pin_voltage_milli_volts_valid;

        return $this;
    }

    /**
     * Gets link_id
     *
     * @return string
     */
    public function getLinkId()
    {
        return $this->container['link_id'];
    }

    /**
     * Sets link_id
     *
     * @param string $link_id Device serial number.
     *
     * @return $this
     */
    public function setLinkId($link_id)
    {
        $this->container['link_id'] = $link_id;

        return $this;
    }

    /**
     * Gets remote_obd_test_records
     *
     * @return \Samsara\Php\Client\Model\RemoteObdTestRecords[]
     */
    public function getRemoteObdTestRecords()
    {
        return $this->container['remote_obd_test_records'];
    }

    /**
     * Sets remote_obd_test_records
     *
     * @param \Samsara\Php\Client\Model\RemoteObdTestRecords[] $remote_obd_test_records Contains all of the specific OBD data collected for a single ECU present on a vehicle. There can can be multiple ECUs on a vehicle.
     *
     * @return $this
     */
    public function setRemoteObdTestRecords($remote_obd_test_records)
    {
        $this->container['remote_obd_test_records'] = $remote_obd_test_records;

        return $this;
    }

    /**
     * Gets test_date_time
     *
     * @return \Samsara\Php\Client\Model\Time
     */
    public function getTestDateTime()
    {
        return $this->container['test_date_time'];
    }

    /**
     * Sets test_date_time
     *
     * @param \Samsara\Php\Client\Model\Time $test_date_time test_date_time
     *
     * @return $this
     */
    public function setTestDateTime($test_date_time)
    {
        $this->container['test_date_time'] = $test_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


