<?php
/**
 * RemoteObdTestRecords
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * RemoteObdTestRecords Class Doc Comment
 *
 * @category Class
 * @description CTP test data reported from one ECU.
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RemoteObdTestRecords implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RemoteObdTestRecords';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cal_cvn' => 'string',
        'cal_cvn_valid' => 'bool',
        'cal_id' => 'string',
        'cal_id_valid' => 'bool',
        'catalyst' => 'string',
        'comprehensive' => 'string',
        'compression_ignition_monitor_supported' => 'string',
        'compression_ignition_monitor_supported_valid' => 'bool',
        'distance_traveled_since_codes_cleared' => 'int',
        'distance_traveled_since_codes_cleared_valid' => 'bool',
        'distance_traveled_with_mil_on' => 'int',
        'distance_traveled_with_mil_on_valid' => 'bool',
        'dtc_count' => 'int',
        'egr' => 'string',
        'emission_related_dtcs' => 'string',
        'emission_related_dtcs_valid' => 'bool',
        'evap_system' => 'string',
        'fuel' => 'string',
        'heated_catalyst' => 'string',
        'heated_o2_sensor' => 'string',
        'iso_sae_reserved' => 'string',
        'mil' => 'string',
        'mil_valid' => 'bool',
        'minutes_since_codes_cleared' => 'int',
        'minutes_since_codes_cleared_valid' => 'bool',
        'minutes_since_mil' => 'int',
        'minutes_since_mil_valid' => 'bool',
        'misfire' => 'string',
        'not_ready_count' => 'int',
        'o2_sensor' => 'string',
        'obd_monitor_status_valid' => 'bool',
        'obd_vin' => 'string',
        'obd_vin_valid' => 'bool',
        'pcm_id' => 'string',
        'pending_dtc_count' => 'int',
        'pending_dtcs' => 'string',
        'pending_dtcs_valid' => 'bool',
        'permanent_dtc_count' => 'int',
        'permanent_dtcs' => 'string',
        'permanent_dtcs_valid' => 'bool',
        'pid_count' => 'int',
        'pid_count_valid' => 'bool',
        'rpm' => 'int',
        'rpm_valid' => 'bool',
        'secondary_air' => 'string',
        'warmups_since_codes_cleared' => 'int',
        'warmups_since_codes_cleared_valid' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cal_cvn' => null,
        'cal_cvn_valid' => null,
        'cal_id' => null,
        'cal_id_valid' => null,
        'catalyst' => null,
        'comprehensive' => null,
        'compression_ignition_monitor_supported' => null,
        'compression_ignition_monitor_supported_valid' => null,
        'distance_traveled_since_codes_cleared' => null,
        'distance_traveled_since_codes_cleared_valid' => null,
        'distance_traveled_with_mil_on' => null,
        'distance_traveled_with_mil_on_valid' => null,
        'dtc_count' => null,
        'egr' => null,
        'emission_related_dtcs' => null,
        'emission_related_dtcs_valid' => null,
        'evap_system' => null,
        'fuel' => null,
        'heated_catalyst' => null,
        'heated_o2_sensor' => null,
        'iso_sae_reserved' => null,
        'mil' => null,
        'mil_valid' => null,
        'minutes_since_codes_cleared' => null,
        'minutes_since_codes_cleared_valid' => null,
        'minutes_since_mil' => null,
        'minutes_since_mil_valid' => null,
        'misfire' => null,
        'not_ready_count' => null,
        'o2_sensor' => null,
        'obd_monitor_status_valid' => null,
        'obd_vin' => null,
        'obd_vin_valid' => null,
        'pcm_id' => null,
        'pending_dtc_count' => null,
        'pending_dtcs' => null,
        'pending_dtcs_valid' => null,
        'permanent_dtc_count' => null,
        'permanent_dtcs' => null,
        'permanent_dtcs_valid' => null,
        'pid_count' => null,
        'pid_count_valid' => null,
        'rpm' => null,
        'rpm_valid' => null,
        'secondary_air' => null,
        'warmups_since_codes_cleared' => null,
        'warmups_since_codes_cleared_valid' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cal_cvn' => 'calCvn',
        'cal_cvn_valid' => 'calCvnValid',
        'cal_id' => 'calId',
        'cal_id_valid' => 'calIdValid',
        'catalyst' => 'catalyst',
        'comprehensive' => 'comprehensive',
        'compression_ignition_monitor_supported' => 'compressionIgnitionMonitorSupported',
        'compression_ignition_monitor_supported_valid' => 'compressionIgnitionMonitorSupportedValid',
        'distance_traveled_since_codes_cleared' => 'distanceTraveledSinceCodesCleared',
        'distance_traveled_since_codes_cleared_valid' => 'distanceTraveledSinceCodesClearedValid',
        'distance_traveled_with_mil_on' => 'distanceTraveledWithMilOn',
        'distance_traveled_with_mil_on_valid' => 'distanceTraveledWithMilOnValid',
        'dtc_count' => 'dtcCount',
        'egr' => 'egr',
        'emission_related_dtcs' => 'emissionRelatedDtcs',
        'emission_related_dtcs_valid' => 'emissionRelatedDtcsValid',
        'evap_system' => 'evapSystem',
        'fuel' => 'fuel',
        'heated_catalyst' => 'heatedCatalyst',
        'heated_o2_sensor' => 'heatedO2Sensor',
        'iso_sae_reserved' => 'isoSaeReserved',
        'mil' => 'mil',
        'mil_valid' => 'milValid',
        'minutes_since_codes_cleared' => 'minutesSinceCodesCleared',
        'minutes_since_codes_cleared_valid' => 'minutesSinceCodesClearedValid',
        'minutes_since_mil' => 'minutesSinceMil',
        'minutes_since_mil_valid' => 'minutesSinceMilValid',
        'misfire' => 'misfire',
        'not_ready_count' => 'notReadyCount',
        'o2_sensor' => 'o2Sensor',
        'obd_monitor_status_valid' => 'obdMonitorStatusValid',
        'obd_vin' => 'obdVin',
        'obd_vin_valid' => 'obdVinValid',
        'pcm_id' => 'pcmId',
        'pending_dtc_count' => 'pendingDtcCount',
        'pending_dtcs' => 'pendingDtcs',
        'pending_dtcs_valid' => 'pendingDtcsValid',
        'permanent_dtc_count' => 'permanentDtcCount',
        'permanent_dtcs' => 'permanentDtcs',
        'permanent_dtcs_valid' => 'permanentDtcsValid',
        'pid_count' => 'pidCount',
        'pid_count_valid' => 'pidCountValid',
        'rpm' => 'rpm',
        'rpm_valid' => 'rpmValid',
        'secondary_air' => 'secondaryAir',
        'warmups_since_codes_cleared' => 'warmupsSinceCodesCleared',
        'warmups_since_codes_cleared_valid' => 'warmupsSinceCodesClearedValid'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cal_cvn' => 'setCalCvn',
        'cal_cvn_valid' => 'setCalCvnValid',
        'cal_id' => 'setCalId',
        'cal_id_valid' => 'setCalIdValid',
        'catalyst' => 'setCatalyst',
        'comprehensive' => 'setComprehensive',
        'compression_ignition_monitor_supported' => 'setCompressionIgnitionMonitorSupported',
        'compression_ignition_monitor_supported_valid' => 'setCompressionIgnitionMonitorSupportedValid',
        'distance_traveled_since_codes_cleared' => 'setDistanceTraveledSinceCodesCleared',
        'distance_traveled_since_codes_cleared_valid' => 'setDistanceTraveledSinceCodesClearedValid',
        'distance_traveled_with_mil_on' => 'setDistanceTraveledWithMilOn',
        'distance_traveled_with_mil_on_valid' => 'setDistanceTraveledWithMilOnValid',
        'dtc_count' => 'setDtcCount',
        'egr' => 'setEgr',
        'emission_related_dtcs' => 'setEmissionRelatedDtcs',
        'emission_related_dtcs_valid' => 'setEmissionRelatedDtcsValid',
        'evap_system' => 'setEvapSystem',
        'fuel' => 'setFuel',
        'heated_catalyst' => 'setHeatedCatalyst',
        'heated_o2_sensor' => 'setHeatedO2Sensor',
        'iso_sae_reserved' => 'setIsoSaeReserved',
        'mil' => 'setMil',
        'mil_valid' => 'setMilValid',
        'minutes_since_codes_cleared' => 'setMinutesSinceCodesCleared',
        'minutes_since_codes_cleared_valid' => 'setMinutesSinceCodesClearedValid',
        'minutes_since_mil' => 'setMinutesSinceMil',
        'minutes_since_mil_valid' => 'setMinutesSinceMilValid',
        'misfire' => 'setMisfire',
        'not_ready_count' => 'setNotReadyCount',
        'o2_sensor' => 'setO2Sensor',
        'obd_monitor_status_valid' => 'setObdMonitorStatusValid',
        'obd_vin' => 'setObdVin',
        'obd_vin_valid' => 'setObdVinValid',
        'pcm_id' => 'setPcmId',
        'pending_dtc_count' => 'setPendingDtcCount',
        'pending_dtcs' => 'setPendingDtcs',
        'pending_dtcs_valid' => 'setPendingDtcsValid',
        'permanent_dtc_count' => 'setPermanentDtcCount',
        'permanent_dtcs' => 'setPermanentDtcs',
        'permanent_dtcs_valid' => 'setPermanentDtcsValid',
        'pid_count' => 'setPidCount',
        'pid_count_valid' => 'setPidCountValid',
        'rpm' => 'setRpm',
        'rpm_valid' => 'setRpmValid',
        'secondary_air' => 'setSecondaryAir',
        'warmups_since_codes_cleared' => 'setWarmupsSinceCodesCleared',
        'warmups_since_codes_cleared_valid' => 'setWarmupsSinceCodesClearedValid'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cal_cvn' => 'getCalCvn',
        'cal_cvn_valid' => 'getCalCvnValid',
        'cal_id' => 'getCalId',
        'cal_id_valid' => 'getCalIdValid',
        'catalyst' => 'getCatalyst',
        'comprehensive' => 'getComprehensive',
        'compression_ignition_monitor_supported' => 'getCompressionIgnitionMonitorSupported',
        'compression_ignition_monitor_supported_valid' => 'getCompressionIgnitionMonitorSupportedValid',
        'distance_traveled_since_codes_cleared' => 'getDistanceTraveledSinceCodesCleared',
        'distance_traveled_since_codes_cleared_valid' => 'getDistanceTraveledSinceCodesClearedValid',
        'distance_traveled_with_mil_on' => 'getDistanceTraveledWithMilOn',
        'distance_traveled_with_mil_on_valid' => 'getDistanceTraveledWithMilOnValid',
        'dtc_count' => 'getDtcCount',
        'egr' => 'getEgr',
        'emission_related_dtcs' => 'getEmissionRelatedDtcs',
        'emission_related_dtcs_valid' => 'getEmissionRelatedDtcsValid',
        'evap_system' => 'getEvapSystem',
        'fuel' => 'getFuel',
        'heated_catalyst' => 'getHeatedCatalyst',
        'heated_o2_sensor' => 'getHeatedO2Sensor',
        'iso_sae_reserved' => 'getIsoSaeReserved',
        'mil' => 'getMil',
        'mil_valid' => 'getMilValid',
        'minutes_since_codes_cleared' => 'getMinutesSinceCodesCleared',
        'minutes_since_codes_cleared_valid' => 'getMinutesSinceCodesClearedValid',
        'minutes_since_mil' => 'getMinutesSinceMil',
        'minutes_since_mil_valid' => 'getMinutesSinceMilValid',
        'misfire' => 'getMisfire',
        'not_ready_count' => 'getNotReadyCount',
        'o2_sensor' => 'getO2Sensor',
        'obd_monitor_status_valid' => 'getObdMonitorStatusValid',
        'obd_vin' => 'getObdVin',
        'obd_vin_valid' => 'getObdVinValid',
        'pcm_id' => 'getPcmId',
        'pending_dtc_count' => 'getPendingDtcCount',
        'pending_dtcs' => 'getPendingDtcs',
        'pending_dtcs_valid' => 'getPendingDtcsValid',
        'permanent_dtc_count' => 'getPermanentDtcCount',
        'permanent_dtcs' => 'getPermanentDtcs',
        'permanent_dtcs_valid' => 'getPermanentDtcsValid',
        'pid_count' => 'getPidCount',
        'pid_count_valid' => 'getPidCountValid',
        'rpm' => 'getRpm',
        'rpm_valid' => 'getRpmValid',
        'secondary_air' => 'getSecondaryAir',
        'warmups_since_codes_cleared' => 'getWarmupsSinceCodesCleared',
        'warmups_since_codes_cleared_valid' => 'getWarmupsSinceCodesClearedValid'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CATALYST_U = 'U';
    const CATALYST_R = 'R';
    const CATALYST_N = 'N';
    const COMPREHENSIVE_U = 'U';
    const COMPREHENSIVE_R = 'R';
    const COMPREHENSIVE_N = 'N';
    const COMPRESSION_IGNITION_MONITOR_SUPPORTED_Y = 'Y';
    const COMPRESSION_IGNITION_MONITOR_SUPPORTED_N = 'N';
    const EGR_U = 'U';
    const EGR_R = 'R';
    const EGR_N = 'N';
    const EVAP_SYSTEM_U = 'U';
    const EVAP_SYSTEM_R = 'R';
    const EVAP_SYSTEM_N = 'N';
    const FUEL_U = 'U';
    const FUEL_R = 'R';
    const FUEL_N = 'N';
    const HEATED_CATALYST_U = 'U';
    const HEATED_CATALYST_R = 'R';
    const HEATED_CATALYST_N = 'N';
    const HEATED_O2_SENSOR_U = 'U';
    const HEATED_O2_SENSOR_R = 'R';
    const HEATED_O2_SENSOR_N = 'N';
    const ISO_SAE_RESERVED_U = 'U';
    const ISO_SAE_RESERVED_R = 'R';
    const ISO_SAE_RESERVED_N = 'N';
    const MIL_Y = 'Y';
    const MIL_N = 'N';
    const MISFIRE_U = 'U';
    const MISFIRE_R = 'R';
    const MISFIRE_N = 'N';
    const O2_SENSOR_U = 'U';
    const O2_SENSOR_R = 'R';
    const O2_SENSOR_N = 'N';
    const SECONDARY_AIR_U = 'U';
    const SECONDARY_AIR_R = 'R';
    const SECONDARY_AIR_N = 'N';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCatalystAllowableValues()
    {
        return [
            self::CATALYST_U,
            self::CATALYST_R,
            self::CATALYST_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getComprehensiveAllowableValues()
    {
        return [
            self::COMPREHENSIVE_U,
            self::COMPREHENSIVE_R,
            self::COMPREHENSIVE_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCompressionIgnitionMonitorSupportedAllowableValues()
    {
        return [
            self::COMPRESSION_IGNITION_MONITOR_SUPPORTED_Y,
            self::COMPRESSION_IGNITION_MONITOR_SUPPORTED_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEgrAllowableValues()
    {
        return [
            self::EGR_U,
            self::EGR_R,
            self::EGR_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEvapSystemAllowableValues()
    {
        return [
            self::EVAP_SYSTEM_U,
            self::EVAP_SYSTEM_R,
            self::EVAP_SYSTEM_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFuelAllowableValues()
    {
        return [
            self::FUEL_U,
            self::FUEL_R,
            self::FUEL_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeatedCatalystAllowableValues()
    {
        return [
            self::HEATED_CATALYST_U,
            self::HEATED_CATALYST_R,
            self::HEATED_CATALYST_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHeatedO2SensorAllowableValues()
    {
        return [
            self::HEATED_O2_SENSOR_U,
            self::HEATED_O2_SENSOR_R,
            self::HEATED_O2_SENSOR_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIsoSaeReservedAllowableValues()
    {
        return [
            self::ISO_SAE_RESERVED_U,
            self::ISO_SAE_RESERVED_R,
            self::ISO_SAE_RESERVED_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMilAllowableValues()
    {
        return [
            self::MIL_Y,
            self::MIL_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMisfireAllowableValues()
    {
        return [
            self::MISFIRE_U,
            self::MISFIRE_R,
            self::MISFIRE_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getO2SensorAllowableValues()
    {
        return [
            self::O2_SENSOR_U,
            self::O2_SENSOR_R,
            self::O2_SENSOR_N,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSecondaryAirAllowableValues()
    {
        return [
            self::SECONDARY_AIR_U,
            self::SECONDARY_AIR_R,
            self::SECONDARY_AIR_N,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cal_cvn'] = isset($data['cal_cvn']) ? $data['cal_cvn'] : null;
        $this->container['cal_cvn_valid'] = isset($data['cal_cvn_valid']) ? $data['cal_cvn_valid'] : null;
        $this->container['cal_id'] = isset($data['cal_id']) ? $data['cal_id'] : null;
        $this->container['cal_id_valid'] = isset($data['cal_id_valid']) ? $data['cal_id_valid'] : null;
        $this->container['catalyst'] = isset($data['catalyst']) ? $data['catalyst'] : null;
        $this->container['comprehensive'] = isset($data['comprehensive']) ? $data['comprehensive'] : null;
        $this->container['compression_ignition_monitor_supported'] = isset($data['compression_ignition_monitor_supported']) ? $data['compression_ignition_monitor_supported'] : null;
        $this->container['compression_ignition_monitor_supported_valid'] = isset($data['compression_ignition_monitor_supported_valid']) ? $data['compression_ignition_monitor_supported_valid'] : null;
        $this->container['distance_traveled_since_codes_cleared'] = isset($data['distance_traveled_since_codes_cleared']) ? $data['distance_traveled_since_codes_cleared'] : null;
        $this->container['distance_traveled_since_codes_cleared_valid'] = isset($data['distance_traveled_since_codes_cleared_valid']) ? $data['distance_traveled_since_codes_cleared_valid'] : null;
        $this->container['distance_traveled_with_mil_on'] = isset($data['distance_traveled_with_mil_on']) ? $data['distance_traveled_with_mil_on'] : null;
        $this->container['distance_traveled_with_mil_on_valid'] = isset($data['distance_traveled_with_mil_on_valid']) ? $data['distance_traveled_with_mil_on_valid'] : null;
        $this->container['dtc_count'] = isset($data['dtc_count']) ? $data['dtc_count'] : null;
        $this->container['egr'] = isset($data['egr']) ? $data['egr'] : null;
        $this->container['emission_related_dtcs'] = isset($data['emission_related_dtcs']) ? $data['emission_related_dtcs'] : null;
        $this->container['emission_related_dtcs_valid'] = isset($data['emission_related_dtcs_valid']) ? $data['emission_related_dtcs_valid'] : null;
        $this->container['evap_system'] = isset($data['evap_system']) ? $data['evap_system'] : null;
        $this->container['fuel'] = isset($data['fuel']) ? $data['fuel'] : null;
        $this->container['heated_catalyst'] = isset($data['heated_catalyst']) ? $data['heated_catalyst'] : null;
        $this->container['heated_o2_sensor'] = isset($data['heated_o2_sensor']) ? $data['heated_o2_sensor'] : null;
        $this->container['iso_sae_reserved'] = isset($data['iso_sae_reserved']) ? $data['iso_sae_reserved'] : null;
        $this->container['mil'] = isset($data['mil']) ? $data['mil'] : null;
        $this->container['mil_valid'] = isset($data['mil_valid']) ? $data['mil_valid'] : null;
        $this->container['minutes_since_codes_cleared'] = isset($data['minutes_since_codes_cleared']) ? $data['minutes_since_codes_cleared'] : null;
        $this->container['minutes_since_codes_cleared_valid'] = isset($data['minutes_since_codes_cleared_valid']) ? $data['minutes_since_codes_cleared_valid'] : null;
        $this->container['minutes_since_mil'] = isset($data['minutes_since_mil']) ? $data['minutes_since_mil'] : null;
        $this->container['minutes_since_mil_valid'] = isset($data['minutes_since_mil_valid']) ? $data['minutes_since_mil_valid'] : null;
        $this->container['misfire'] = isset($data['misfire']) ? $data['misfire'] : null;
        $this->container['not_ready_count'] = isset($data['not_ready_count']) ? $data['not_ready_count'] : null;
        $this->container['o2_sensor'] = isset($data['o2_sensor']) ? $data['o2_sensor'] : null;
        $this->container['obd_monitor_status_valid'] = isset($data['obd_monitor_status_valid']) ? $data['obd_monitor_status_valid'] : null;
        $this->container['obd_vin'] = isset($data['obd_vin']) ? $data['obd_vin'] : null;
        $this->container['obd_vin_valid'] = isset($data['obd_vin_valid']) ? $data['obd_vin_valid'] : null;
        $this->container['pcm_id'] = isset($data['pcm_id']) ? $data['pcm_id'] : null;
        $this->container['pending_dtc_count'] = isset($data['pending_dtc_count']) ? $data['pending_dtc_count'] : null;
        $this->container['pending_dtcs'] = isset($data['pending_dtcs']) ? $data['pending_dtcs'] : null;
        $this->container['pending_dtcs_valid'] = isset($data['pending_dtcs_valid']) ? $data['pending_dtcs_valid'] : null;
        $this->container['permanent_dtc_count'] = isset($data['permanent_dtc_count']) ? $data['permanent_dtc_count'] : null;
        $this->container['permanent_dtcs'] = isset($data['permanent_dtcs']) ? $data['permanent_dtcs'] : null;
        $this->container['permanent_dtcs_valid'] = isset($data['permanent_dtcs_valid']) ? $data['permanent_dtcs_valid'] : null;
        $this->container['pid_count'] = isset($data['pid_count']) ? $data['pid_count'] : null;
        $this->container['pid_count_valid'] = isset($data['pid_count_valid']) ? $data['pid_count_valid'] : null;
        $this->container['rpm'] = isset($data['rpm']) ? $data['rpm'] : null;
        $this->container['rpm_valid'] = isset($data['rpm_valid']) ? $data['rpm_valid'] : null;
        $this->container['secondary_air'] = isset($data['secondary_air']) ? $data['secondary_air'] : null;
        $this->container['warmups_since_codes_cleared'] = isset($data['warmups_since_codes_cleared']) ? $data['warmups_since_codes_cleared'] : null;
        $this->container['warmups_since_codes_cleared_valid'] = isset($data['warmups_since_codes_cleared_valid']) ? $data['warmups_since_codes_cleared_valid'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCatalystAllowableValues();
        if (!is_null($this->container['catalyst']) && !in_array($this->container['catalyst'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'catalyst', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getComprehensiveAllowableValues();
        if (!is_null($this->container['comprehensive']) && !in_array($this->container['comprehensive'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'comprehensive', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCompressionIgnitionMonitorSupportedAllowableValues();
        if (!is_null($this->container['compression_ignition_monitor_supported']) && !in_array($this->container['compression_ignition_monitor_supported'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'compression_ignition_monitor_supported', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEgrAllowableValues();
        if (!is_null($this->container['egr']) && !in_array($this->container['egr'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'egr', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getEvapSystemAllowableValues();
        if (!is_null($this->container['evap_system']) && !in_array($this->container['evap_system'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'evap_system', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getFuelAllowableValues();
        if (!is_null($this->container['fuel']) && !in_array($this->container['fuel'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'fuel', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeatedCatalystAllowableValues();
        if (!is_null($this->container['heated_catalyst']) && !in_array($this->container['heated_catalyst'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'heated_catalyst', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHeatedO2SensorAllowableValues();
        if (!is_null($this->container['heated_o2_sensor']) && !in_array($this->container['heated_o2_sensor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'heated_o2_sensor', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIsoSaeReservedAllowableValues();
        if (!is_null($this->container['iso_sae_reserved']) && !in_array($this->container['iso_sae_reserved'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'iso_sae_reserved', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMilAllowableValues();
        if (!is_null($this->container['mil']) && !in_array($this->container['mil'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'mil', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMisfireAllowableValues();
        if (!is_null($this->container['misfire']) && !in_array($this->container['misfire'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'misfire', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getO2SensorAllowableValues();
        if (!is_null($this->container['o2_sensor']) && !in_array($this->container['o2_sensor'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'o2_sensor', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSecondaryAirAllowableValues();
        if (!is_null($this->container['secondary_air']) && !in_array($this->container['secondary_air'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'secondary_air', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cal_cvn
     *
     * @return string
     */
    public function getCalCvn()
    {
        return $this->container['cal_cvn'];
    }

    /**
     * Sets cal_cvn
     *
     * @param string $cal_cvn Calibration Verification Numbers read from the CAN bus, separated by a pipe character.
     *
     * @return $this
     */
    public function setCalCvn($cal_cvn)
    {
        $this->container['cal_cvn'] = $cal_cvn;

        return $this;
    }

    /**
     * Gets cal_cvn_valid
     *
     * @return bool
     */
    public function getCalCvnValid()
    {
        return $this->container['cal_cvn_valid'];
    }

    /**
     * Sets cal_cvn_valid
     *
     * @param bool $cal_cvn_valid Indicates CalCvnCount was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setCalCvnValid($cal_cvn_valid)
    {
        $this->container['cal_cvn_valid'] = $cal_cvn_valid;

        return $this;
    }

    /**
     * Gets cal_id
     *
     * @return string
     */
    public function getCalId()
    {
        return $this->container['cal_id'];
    }

    /**
     * Sets cal_id
     *
     * @param string $cal_id Calibration IDs read from the CAN bus, separated by a pipe character.
     *
     * @return $this
     */
    public function setCalId($cal_id)
    {
        $this->container['cal_id'] = $cal_id;

        return $this;
    }

    /**
     * Gets cal_id_valid
     *
     * @return bool
     */
    public function getCalIdValid()
    {
        return $this->container['cal_id_valid'];
    }

    /**
     * Sets cal_id_valid
     *
     * @param bool $cal_id_valid Indicates CalId was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setCalIdValid($cal_id_valid)
    {
        $this->container['cal_id_valid'] = $cal_id_valid;

        return $this;
    }

    /**
     * Gets catalyst
     *
     * @return string
     */
    public function getCatalyst()
    {
        return $this->container['catalyst'];
    }

    /**
     * Sets catalyst
     *
     * @param string $catalyst OBD Monitor Status - Catalyst or NMHC Catalyst as read from the CAN bus.
     *
     * @return $this
     */
    public function setCatalyst($catalyst)
    {
        $allowedValues = $this->getCatalystAllowableValues();
        if (!is_null($catalyst) && !in_array($catalyst, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'catalyst', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['catalyst'] = $catalyst;

        return $this;
    }

    /**
     * Gets comprehensive
     *
     * @return string
     */
    public function getComprehensive()
    {
        return $this->container['comprehensive'];
    }

    /**
     * Sets comprehensive
     *
     * @param string $comprehensive OBD Monitor Status - Comprehensive as read from the CAN bus.
     *
     * @return $this
     */
    public function setComprehensive($comprehensive)
    {
        $allowedValues = $this->getComprehensiveAllowableValues();
        if (!is_null($comprehensive) && !in_array($comprehensive, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'comprehensive', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['comprehensive'] = $comprehensive;

        return $this;
    }

    /**
     * Gets compression_ignition_monitor_supported
     *
     * @return string
     */
    public function getCompressionIgnitionMonitorSupported()
    {
        return $this->container['compression_ignition_monitor_supported'];
    }

    /**
     * Sets compression_ignition_monitor_supported
     *
     * @param string $compression_ignition_monitor_supported Compression ignition monitor supported as read from the CAN bus.
     *
     * @return $this
     */
    public function setCompressionIgnitionMonitorSupported($compression_ignition_monitor_supported)
    {
        $allowedValues = $this->getCompressionIgnitionMonitorSupportedAllowableValues();
        if (!is_null($compression_ignition_monitor_supported) && !in_array($compression_ignition_monitor_supported, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'compression_ignition_monitor_supported', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['compression_ignition_monitor_supported'] = $compression_ignition_monitor_supported;

        return $this;
    }

    /**
     * Gets compression_ignition_monitor_supported_valid
     *
     * @return bool
     */
    public function getCompressionIgnitionMonitorSupportedValid()
    {
        return $this->container['compression_ignition_monitor_supported_valid'];
    }

    /**
     * Sets compression_ignition_monitor_supported_valid
     *
     * @param bool $compression_ignition_monitor_supported_valid Indicates CompressionIgnitionMonitorSupported was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setCompressionIgnitionMonitorSupportedValid($compression_ignition_monitor_supported_valid)
    {
        $this->container['compression_ignition_monitor_supported_valid'] = $compression_ignition_monitor_supported_valid;

        return $this;
    }

    /**
     * Gets distance_traveled_since_codes_cleared
     *
     * @return int
     */
    public function getDistanceTraveledSinceCodesCleared()
    {
        return $this->container['distance_traveled_since_codes_cleared'];
    }

    /**
     * Sets distance_traveled_since_codes_cleared
     *
     * @param int $distance_traveled_since_codes_cleared Distance Traveled Since Codes Cleared as read from the CAN bus.
     *
     * @return $this
     */
    public function setDistanceTraveledSinceCodesCleared($distance_traveled_since_codes_cleared)
    {
        $this->container['distance_traveled_since_codes_cleared'] = $distance_traveled_since_codes_cleared;

        return $this;
    }

    /**
     * Gets distance_traveled_since_codes_cleared_valid
     *
     * @return bool
     */
    public function getDistanceTraveledSinceCodesClearedValid()
    {
        return $this->container['distance_traveled_since_codes_cleared_valid'];
    }

    /**
     * Sets distance_traveled_since_codes_cleared_valid
     *
     * @param bool $distance_traveled_since_codes_cleared_valid Indicates DistanceTraveledSinceCodesCleared was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setDistanceTraveledSinceCodesClearedValid($distance_traveled_since_codes_cleared_valid)
    {
        $this->container['distance_traveled_since_codes_cleared_valid'] = $distance_traveled_since_codes_cleared_valid;

        return $this;
    }

    /**
     * Gets distance_traveled_with_mil_on
     *
     * @return int
     */
    public function getDistanceTraveledWithMilOn()
    {
        return $this->container['distance_traveled_with_mil_on'];
    }

    /**
     * Sets distance_traveled_with_mil_on
     *
     * @param int $distance_traveled_with_mil_on Distance Traveled With MIL On as read from the CAN bus.
     *
     * @return $this
     */
    public function setDistanceTraveledWithMilOn($distance_traveled_with_mil_on)
    {
        $this->container['distance_traveled_with_mil_on'] = $distance_traveled_with_mil_on;

        return $this;
    }

    /**
     * Gets distance_traveled_with_mil_on_valid
     *
     * @return bool
     */
    public function getDistanceTraveledWithMilOnValid()
    {
        return $this->container['distance_traveled_with_mil_on_valid'];
    }

    /**
     * Sets distance_traveled_with_mil_on_valid
     *
     * @param bool $distance_traveled_with_mil_on_valid Indicates DistanceTraveledWithMilOn was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setDistanceTraveledWithMilOnValid($distance_traveled_with_mil_on_valid)
    {
        $this->container['distance_traveled_with_mil_on_valid'] = $distance_traveled_with_mil_on_valid;

        return $this;
    }

    /**
     * Gets dtc_count
     *
     * @return int
     */
    public function getDtcCount()
    {
        return $this->container['dtc_count'];
    }

    /**
     * Sets dtc_count
     *
     * @param int $dtc_count Number of emissions related DTCs read from the CAN bus.
     *
     * @return $this
     */
    public function setDtcCount($dtc_count)
    {
        $this->container['dtc_count'] = $dtc_count;

        return $this;
    }

    /**
     * Gets egr
     *
     * @return string
     */
    public function getEgr()
    {
        return $this->container['egr'];
    }

    /**
     * Sets egr
     *
     * @param string $egr OBD Monitor Status - EGR/VVT as read from the CAN bus.
     *
     * @return $this
     */
    public function setEgr($egr)
    {
        $allowedValues = $this->getEgrAllowableValues();
        if (!is_null($egr) && !in_array($egr, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'egr', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['egr'] = $egr;

        return $this;
    }

    /**
     * Gets emission_related_dtcs
     *
     * @return string
     */
    public function getEmissionRelatedDtcs()
    {
        return $this->container['emission_related_dtcs'];
    }

    /**
     * Sets emission_related_dtcs
     *
     * @param string $emission_related_dtcs Emission related DTCs as read from the CAN bus, separated by pipe characters.
     *
     * @return $this
     */
    public function setEmissionRelatedDtcs($emission_related_dtcs)
    {
        $this->container['emission_related_dtcs'] = $emission_related_dtcs;

        return $this;
    }

    /**
     * Gets emission_related_dtcs_valid
     *
     * @return bool
     */
    public function getEmissionRelatedDtcsValid()
    {
        return $this->container['emission_related_dtcs_valid'];
    }

    /**
     * Sets emission_related_dtcs_valid
     *
     * @param bool $emission_related_dtcs_valid Indicates EmissionRelatedDtcs was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setEmissionRelatedDtcsValid($emission_related_dtcs_valid)
    {
        $this->container['emission_related_dtcs_valid'] = $emission_related_dtcs_valid;

        return $this;
    }

    /**
     * Gets evap_system
     *
     * @return string
     */
    public function getEvapSystem()
    {
        return $this->container['evap_system'];
    }

    /**
     * Sets evap_system
     *
     * @param string $evap_system OBD Monitor Status - Evaporative System or ISO/SAE Reserved as read from the CAN bus.
     *
     * @return $this
     */
    public function setEvapSystem($evap_system)
    {
        $allowedValues = $this->getEvapSystemAllowableValues();
        if (!is_null($evap_system) && !in_array($evap_system, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'evap_system', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['evap_system'] = $evap_system;

        return $this;
    }

    /**
     * Gets fuel
     *
     * @return string
     */
    public function getFuel()
    {
        return $this->container['fuel'];
    }

    /**
     * Sets fuel
     *
     * @param string $fuel OBD Monitor Status - Fuel as read from the CAN bus.
     *
     * @return $this
     */
    public function setFuel($fuel)
    {
        $allowedValues = $this->getFuelAllowableValues();
        if (!is_null($fuel) && !in_array($fuel, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'fuel', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['fuel'] = $fuel;

        return $this;
    }

    /**
     * Gets heated_catalyst
     *
     * @return string
     */
    public function getHeatedCatalyst()
    {
        return $this->container['heated_catalyst'];
    }

    /**
     * Sets heated_catalyst
     *
     * @param string $heated_catalyst OBD Monitor Status - Heated Catalyst or NOx/SCR aftertreatment as read from the CAN bus.
     *
     * @return $this
     */
    public function setHeatedCatalyst($heated_catalyst)
    {
        $allowedValues = $this->getHeatedCatalystAllowableValues();
        if (!is_null($heated_catalyst) && !in_array($heated_catalyst, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'heated_catalyst', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['heated_catalyst'] = $heated_catalyst;

        return $this;
    }

    /**
     * Gets heated_o2_sensor
     *
     * @return string
     */
    public function getHeatedO2Sensor()
    {
        return $this->container['heated_o2_sensor'];
    }

    /**
     * Sets heated_o2_sensor
     *
     * @param string $heated_o2_sensor OBD Monitor Status - Oxygen Sensor Heater or PM Filter as read from the CAN bus.
     *
     * @return $this
     */
    public function setHeatedO2Sensor($heated_o2_sensor)
    {
        $allowedValues = $this->getHeatedO2SensorAllowableValues();
        if (!is_null($heated_o2_sensor) && !in_array($heated_o2_sensor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'heated_o2_sensor', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['heated_o2_sensor'] = $heated_o2_sensor;

        return $this;
    }

    /**
     * Gets iso_sae_reserved
     *
     * @return string
     */
    public function getIsoSaeReserved()
    {
        return $this->container['iso_sae_reserved'];
    }

    /**
     * Sets iso_sae_reserved
     *
     * @param string $iso_sae_reserved OBD Monitor Status - ISO/SAE Reserved as read from the CAN bus.
     *
     * @return $this
     */
    public function setIsoSaeReserved($iso_sae_reserved)
    {
        $allowedValues = $this->getIsoSaeReservedAllowableValues();
        if (!is_null($iso_sae_reserved) && !in_array($iso_sae_reserved, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'iso_sae_reserved', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['iso_sae_reserved'] = $iso_sae_reserved;

        return $this;
    }

    /**
     * Gets mil
     *
     * @return string
     */
    public function getMil()
    {
        return $this->container['mil'];
    }

    /**
     * Sets mil
     *
     * @param string $mil Malfunction indicator lamp status as read from the CAN bus.
     *
     * @return $this
     */
    public function setMil($mil)
    {
        $allowedValues = $this->getMilAllowableValues();
        if (!is_null($mil) && !in_array($mil, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'mil', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['mil'] = $mil;

        return $this;
    }

    /**
     * Gets mil_valid
     *
     * @return bool
     */
    public function getMilValid()
    {
        return $this->container['mil_valid'];
    }

    /**
     * Sets mil_valid
     *
     * @param bool $mil_valid Indicates Mil was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setMilValid($mil_valid)
    {
        $this->container['mil_valid'] = $mil_valid;

        return $this;
    }

    /**
     * Gets minutes_since_codes_cleared
     *
     * @return int
     */
    public function getMinutesSinceCodesCleared()
    {
        return $this->container['minutes_since_codes_cleared'];
    }

    /**
     * Sets minutes_since_codes_cleared
     *
     * @param int $minutes_since_codes_cleared Minutes Since Codes Cleared as read from the CAN bus.
     *
     * @return $this
     */
    public function setMinutesSinceCodesCleared($minutes_since_codes_cleared)
    {
        $this->container['minutes_since_codes_cleared'] = $minutes_since_codes_cleared;

        return $this;
    }

    /**
     * Gets minutes_since_codes_cleared_valid
     *
     * @return bool
     */
    public function getMinutesSinceCodesClearedValid()
    {
        return $this->container['minutes_since_codes_cleared_valid'];
    }

    /**
     * Sets minutes_since_codes_cleared_valid
     *
     * @param bool $minutes_since_codes_cleared_valid Indicates MinutesSinceCodesCleared was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setMinutesSinceCodesClearedValid($minutes_since_codes_cleared_valid)
    {
        $this->container['minutes_since_codes_cleared_valid'] = $minutes_since_codes_cleared_valid;

        return $this;
    }

    /**
     * Gets minutes_since_mil
     *
     * @return int
     */
    public function getMinutesSinceMil()
    {
        return $this->container['minutes_since_mil'];
    }

    /**
     * Sets minutes_since_mil
     *
     * @param int $minutes_since_mil Minutes Since MIL On as read from the CAN bus.
     *
     * @return $this
     */
    public function setMinutesSinceMil($minutes_since_mil)
    {
        $this->container['minutes_since_mil'] = $minutes_since_mil;

        return $this;
    }

    /**
     * Gets minutes_since_mil_valid
     *
     * @return bool
     */
    public function getMinutesSinceMilValid()
    {
        return $this->container['minutes_since_mil_valid'];
    }

    /**
     * Sets minutes_since_mil_valid
     *
     * @param bool $minutes_since_mil_valid Indicates MinutesSinceMil was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setMinutesSinceMilValid($minutes_since_mil_valid)
    {
        $this->container['minutes_since_mil_valid'] = $minutes_since_mil_valid;

        return $this;
    }

    /**
     * Gets misfire
     *
     * @return string
     */
    public function getMisfire()
    {
        return $this->container['misfire'];
    }

    /**
     * Sets misfire
     *
     * @param string $misfire OBD Monitor Status - Misfire as read from the CAN bus.
     *
     * @return $this
     */
    public function setMisfire($misfire)
    {
        $allowedValues = $this->getMisfireAllowableValues();
        if (!is_null($misfire) && !in_array($misfire, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'misfire', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['misfire'] = $misfire;

        return $this;
    }

    /**
     * Gets not_ready_count
     *
     * @return int
     */
    public function getNotReadyCount()
    {
        return $this->container['not_ready_count'];
    }

    /**
     * Sets not_ready_count
     *
     * @param int $not_ready_count Number of OBD Monitor Statuses reporting 'Supported and not ready'.
     *
     * @return $this
     */
    public function setNotReadyCount($not_ready_count)
    {
        $this->container['not_ready_count'] = $not_ready_count;

        return $this;
    }

    /**
     * Gets o2_sensor
     *
     * @return string
     */
    public function getO2Sensor()
    {
        return $this->container['o2_sensor'];
    }

    /**
     * Sets o2_sensor
     *
     * @param string $o2_sensor OBD Monitor Status - Oxygen Sensor or Exhaust Gas Sensor as read from the CAN bus.
     *
     * @return $this
     */
    public function setO2Sensor($o2_sensor)
    {
        $allowedValues = $this->getO2SensorAllowableValues();
        if (!is_null($o2_sensor) && !in_array($o2_sensor, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'o2_sensor', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['o2_sensor'] = $o2_sensor;

        return $this;
    }

    /**
     * Gets obd_monitor_status_valid
     *
     * @return bool
     */
    public function getObdMonitorStatusValid()
    {
        return $this->container['obd_monitor_status_valid'];
    }

    /**
     * Sets obd_monitor_status_valid
     *
     * @param bool $obd_monitor_status_valid Indicates Obd Monitor Statuses were successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setObdMonitorStatusValid($obd_monitor_status_valid)
    {
        $this->container['obd_monitor_status_valid'] = $obd_monitor_status_valid;

        return $this;
    }

    /**
     * Gets obd_vin
     *
     * @return string
     */
    public function getObdVin()
    {
        return $this->container['obd_vin'];
    }

    /**
     * Sets obd_vin
     *
     * @param string $obd_vin Vehicle identification number as read from the CAN bus.
     *
     * @return $this
     */
    public function setObdVin($obd_vin)
    {
        $this->container['obd_vin'] = $obd_vin;

        return $this;
    }

    /**
     * Gets obd_vin_valid
     *
     * @return bool
     */
    public function getObdVinValid()
    {
        return $this->container['obd_vin_valid'];
    }

    /**
     * Sets obd_vin_valid
     *
     * @param bool $obd_vin_valid Indicates ObdVin was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setObdVinValid($obd_vin_valid)
    {
        $this->container['obd_vin_valid'] = $obd_vin_valid;

        return $this;
    }

    /**
     * Gets pcm_id
     *
     * @return string
     */
    public function getPcmId()
    {
        return $this->container['pcm_id'];
    }

    /**
     * Sets pcm_id
     *
     * @param string $pcm_id ECU Address for the ECU that was read from the CAN bus.
     *
     * @return $this
     */
    public function setPcmId($pcm_id)
    {
        $this->container['pcm_id'] = $pcm_id;

        return $this;
    }

    /**
     * Gets pending_dtc_count
     *
     * @return int
     */
    public function getPendingDtcCount()
    {
        return $this->container['pending_dtc_count'];
    }

    /**
     * Sets pending_dtc_count
     *
     * @param int $pending_dtc_count Number of pending DTCs read from the CAN bus.
     *
     * @return $this
     */
    public function setPendingDtcCount($pending_dtc_count)
    {
        $this->container['pending_dtc_count'] = $pending_dtc_count;

        return $this;
    }

    /**
     * Gets pending_dtcs
     *
     * @return string
     */
    public function getPendingDtcs()
    {
        return $this->container['pending_dtcs'];
    }

    /**
     * Sets pending_dtcs
     *
     * @param string $pending_dtcs Pending DTCs as read from the CAN bus, separated by pipe characters.
     *
     * @return $this
     */
    public function setPendingDtcs($pending_dtcs)
    {
        $this->container['pending_dtcs'] = $pending_dtcs;

        return $this;
    }

    /**
     * Gets pending_dtcs_valid
     *
     * @return bool
     */
    public function getPendingDtcsValid()
    {
        return $this->container['pending_dtcs_valid'];
    }

    /**
     * Sets pending_dtcs_valid
     *
     * @param bool $pending_dtcs_valid Indicates PendingDtcs was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setPendingDtcsValid($pending_dtcs_valid)
    {
        $this->container['pending_dtcs_valid'] = $pending_dtcs_valid;

        return $this;
    }

    /**
     * Gets permanent_dtc_count
     *
     * @return int
     */
    public function getPermanentDtcCount()
    {
        return $this->container['permanent_dtc_count'];
    }

    /**
     * Sets permanent_dtc_count
     *
     * @param int $permanent_dtc_count Number of permanent DTCs read from the CAN bus.
     *
     * @return $this
     */
    public function setPermanentDtcCount($permanent_dtc_count)
    {
        $this->container['permanent_dtc_count'] = $permanent_dtc_count;

        return $this;
    }

    /**
     * Gets permanent_dtcs
     *
     * @return string
     */
    public function getPermanentDtcs()
    {
        return $this->container['permanent_dtcs'];
    }

    /**
     * Sets permanent_dtcs
     *
     * @param string $permanent_dtcs Permanent DTCs as read from the CAN bus, separated by pipe characters.
     *
     * @return $this
     */
    public function setPermanentDtcs($permanent_dtcs)
    {
        $this->container['permanent_dtcs'] = $permanent_dtcs;

        return $this;
    }

    /**
     * Gets permanent_dtcs_valid
     *
     * @return bool
     */
    public function getPermanentDtcsValid()
    {
        return $this->container['permanent_dtcs_valid'];
    }

    /**
     * Sets permanent_dtcs_valid
     *
     * @param bool $permanent_dtcs_valid Indicates PermanentDtcs was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setPermanentDtcsValid($permanent_dtcs_valid)
    {
        $this->container['permanent_dtcs_valid'] = $permanent_dtcs_valid;

        return $this;
    }

    /**
     * Gets pid_count
     *
     * @return int
     */
    public function getPidCount()
    {
        return $this->container['pid_count'];
    }

    /**
     * Sets pid_count
     *
     * @param int $pid_count PidCount is a count of all PIDs supported for this control module as read from the CAN bus
     *
     * @return $this
     */
    public function setPidCount($pid_count)
    {
        $this->container['pid_count'] = $pid_count;

        return $this;
    }

    /**
     * Gets pid_count_valid
     *
     * @return bool
     */
    public function getPidCountValid()
    {
        return $this->container['pid_count_valid'];
    }

    /**
     * Sets pid_count_valid
     *
     * @param bool $pid_count_valid Indicates PidCount was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setPidCountValid($pid_count_valid)
    {
        $this->container['pid_count_valid'] = $pid_count_valid;

        return $this;
    }

    /**
     * Gets rpm
     *
     * @return int
     */
    public function getRpm()
    {
        return $this->container['rpm'];
    }

    /**
     * Sets rpm
     *
     * @param int $rpm Revolutions per minute as read from the CAN bus.
     *
     * @return $this
     */
    public function setRpm($rpm)
    {
        $this->container['rpm'] = $rpm;

        return $this;
    }

    /**
     * Gets rpm_valid
     *
     * @return bool
     */
    public function getRpmValid()
    {
        return $this->container['rpm_valid'];
    }

    /**
     * Sets rpm_valid
     *
     * @param bool $rpm_valid Indicates Rpm was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setRpmValid($rpm_valid)
    {
        $this->container['rpm_valid'] = $rpm_valid;

        return $this;
    }

    /**
     * Gets secondary_air
     *
     * @return string
     */
    public function getSecondaryAir()
    {
        return $this->container['secondary_air'];
    }

    /**
     * Sets secondary_air
     *
     * @param string $secondary_air OBD Monitor Status - Secondary Air System or Boost Pressure System as read from the CAN bus.
     *
     * @return $this
     */
    public function setSecondaryAir($secondary_air)
    {
        $allowedValues = $this->getSecondaryAirAllowableValues();
        if (!is_null($secondary_air) && !in_array($secondary_air, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'secondary_air', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['secondary_air'] = $secondary_air;

        return $this;
    }

    /**
     * Gets warmups_since_codes_cleared
     *
     * @return int
     */
    public function getWarmupsSinceCodesCleared()
    {
        return $this->container['warmups_since_codes_cleared'];
    }

    /**
     * Sets warmups_since_codes_cleared
     *
     * @param int $warmups_since_codes_cleared Warmups Since Codes Cleared as read from the CAN bus.
     *
     * @return $this
     */
    public function setWarmupsSinceCodesCleared($warmups_since_codes_cleared)
    {
        $this->container['warmups_since_codes_cleared'] = $warmups_since_codes_cleared;

        return $this;
    }

    /**
     * Gets warmups_since_codes_cleared_valid
     *
     * @return bool
     */
    public function getWarmupsSinceCodesClearedValid()
    {
        return $this->container['warmups_since_codes_cleared_valid'];
    }

    /**
     * Sets warmups_since_codes_cleared_valid
     *
     * @param bool $warmups_since_codes_cleared_valid Indicates WarmupsSinceCodesCleared was successfully read from the CAN bus.
     *
     * @return $this
     */
    public function setWarmupsSinceCodesClearedValid($warmups_since_codes_cleared_valid)
    {
        $this->container['warmups_since_codes_cleared_valid'] = $warmups_since_codes_cleared_valid;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


