<?php
/**
 * VehicleResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * VehicleResponse Class Doc Comment
 *
 * @category Class
 * @description The vehicle object.
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VehicleResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'VehicleResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aux_input_type1' => 'string',
        'aux_input_type2' => 'string',
        'external_ids' => '\Samsara\Php\Client\Model\ExternalIds',
        'harsh_acceleration_setting_type' => 'string',
        'id' => 'string',
        'license_plate' => 'string',
        'make' => 'string',
        'model' => 'string',
        'name' => 'string',
        'notes' => 'string',
        'static_assigned_driver' => '\Samsara\Php\Client\Model\DriverTinyResponse',
        'tags' => '\Samsara\Php\Client\Model\TagTinyResponse[]',
        'vin' => 'string',
        'year' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aux_input_type1' => null,
        'aux_input_type2' => null,
        'external_ids' => null,
        'harsh_acceleration_setting_type' => null,
        'id' => null,
        'license_plate' => null,
        'make' => null,
        'model' => null,
        'name' => null,
        'notes' => null,
        'static_assigned_driver' => null,
        'tags' => null,
        'vin' => null,
        'year' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aux_input_type1' => 'auxInputType1',
        'aux_input_type2' => 'auxInputType2',
        'external_ids' => 'externalIds',
        'harsh_acceleration_setting_type' => 'harshAccelerationSettingType',
        'id' => 'id',
        'license_plate' => 'licensePlate',
        'make' => 'make',
        'model' => 'model',
        'name' => 'name',
        'notes' => 'notes',
        'static_assigned_driver' => 'staticAssignedDriver',
        'tags' => 'tags',
        'vin' => 'vin',
        'year' => 'year'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aux_input_type1' => 'setAuxInputType1',
        'aux_input_type2' => 'setAuxInputType2',
        'external_ids' => 'setExternalIds',
        'harsh_acceleration_setting_type' => 'setHarshAccelerationSettingType',
        'id' => 'setId',
        'license_plate' => 'setLicensePlate',
        'make' => 'setMake',
        'model' => 'setModel',
        'name' => 'setName',
        'notes' => 'setNotes',
        'static_assigned_driver' => 'setStaticAssignedDriver',
        'tags' => 'setTags',
        'vin' => 'setVin',
        'year' => 'setYear'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aux_input_type1' => 'getAuxInputType1',
        'aux_input_type2' => 'getAuxInputType2',
        'external_ids' => 'getExternalIds',
        'harsh_acceleration_setting_type' => 'getHarshAccelerationSettingType',
        'id' => 'getId',
        'license_plate' => 'getLicensePlate',
        'make' => 'getMake',
        'model' => 'getModel',
        'name' => 'getName',
        'notes' => 'getNotes',
        'static_assigned_driver' => 'getStaticAssignedDriver',
        'tags' => 'getTags',
        'vin' => 'getVin',
        'year' => 'getYear'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const AUX_INPUT_TYPE1_NONE = 'none';
    const AUX_INPUT_TYPE1_EMERGENCY_LIGHTS = 'emergencyLights';
    const AUX_INPUT_TYPE1_EMERGENCY_ALARM = 'emergencyAlarm';
    const AUX_INPUT_TYPE1_STOP_PADDLE = 'stopPaddle';
    const AUX_INPUT_TYPE1_POWER_TAKE_OFF = 'powerTakeOff';
    const AUX_INPUT_TYPE1_PLOW = 'plow';
    const AUX_INPUT_TYPE1_SWEEPER = 'sweeper';
    const AUX_INPUT_TYPE1_SALTER = 'salter';
    const AUX_INPUT_TYPE1_REEFER = 'reefer';
    const AUX_INPUT_TYPE1_DOOR = 'door';
    const AUX_INPUT_TYPE1_BOOM = 'boom';
    const AUX_INPUT_TYPE1_AUXILIARY_ENGINE = 'auxiliaryEngine';
    const AUX_INPUT_TYPE1_GENERATOR = 'generator';
    const AUX_INPUT_TYPE1_EIGHT_WAY_LIGHTS = 'eightWayLights';
    const AUX_INPUT_TYPE2_NONE = 'none';
    const AUX_INPUT_TYPE2_EMERGENCY_LIGHTS = 'emergencyLights';
    const AUX_INPUT_TYPE2_EMERGENCY_ALARM = 'emergencyAlarm';
    const AUX_INPUT_TYPE2_STOP_PADDLE = 'stopPaddle';
    const AUX_INPUT_TYPE2_POWER_TAKE_OFF = 'powerTakeOff';
    const AUX_INPUT_TYPE2_PLOW = 'plow';
    const AUX_INPUT_TYPE2_SWEEPER = 'sweeper';
    const AUX_INPUT_TYPE2_SALTER = 'salter';
    const AUX_INPUT_TYPE2_REEFER = 'reefer';
    const AUX_INPUT_TYPE2_DOOR = 'door';
    const AUX_INPUT_TYPE2_BOOM = 'boom';
    const AUX_INPUT_TYPE2_AUXILIARY_ENGINE = 'auxiliaryEngine';
    const AUX_INPUT_TYPE2_GENERATOR = 'generator';
    const AUX_INPUT_TYPE2_EIGHT_WAY_LIGHTS = 'eightWayLights';
    const HARSH_ACCELERATION_SETTING_TYPE_PASSENGER_CAR = 'passengerCar';
    const HARSH_ACCELERATION_SETTING_TYPE_LIGHT_TRUCK = 'lightTruck';
    const HARSH_ACCELERATION_SETTING_TYPE_HEAVY_DUTY = 'heavyDuty';
    const HARSH_ACCELERATION_SETTING_TYPE_OFF = 'off';
    const HARSH_ACCELERATION_SETTING_TYPE_AUTOMATIC = 'automatic';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuxInputType1AllowableValues()
    {
        return [
            self::AUX_INPUT_TYPE1_NONE,
            self::AUX_INPUT_TYPE1_EMERGENCY_LIGHTS,
            self::AUX_INPUT_TYPE1_EMERGENCY_ALARM,
            self::AUX_INPUT_TYPE1_STOP_PADDLE,
            self::AUX_INPUT_TYPE1_POWER_TAKE_OFF,
            self::AUX_INPUT_TYPE1_PLOW,
            self::AUX_INPUT_TYPE1_SWEEPER,
            self::AUX_INPUT_TYPE1_SALTER,
            self::AUX_INPUT_TYPE1_REEFER,
            self::AUX_INPUT_TYPE1_DOOR,
            self::AUX_INPUT_TYPE1_BOOM,
            self::AUX_INPUT_TYPE1_AUXILIARY_ENGINE,
            self::AUX_INPUT_TYPE1_GENERATOR,
            self::AUX_INPUT_TYPE1_EIGHT_WAY_LIGHTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAuxInputType2AllowableValues()
    {
        return [
            self::AUX_INPUT_TYPE2_NONE,
            self::AUX_INPUT_TYPE2_EMERGENCY_LIGHTS,
            self::AUX_INPUT_TYPE2_EMERGENCY_ALARM,
            self::AUX_INPUT_TYPE2_STOP_PADDLE,
            self::AUX_INPUT_TYPE2_POWER_TAKE_OFF,
            self::AUX_INPUT_TYPE2_PLOW,
            self::AUX_INPUT_TYPE2_SWEEPER,
            self::AUX_INPUT_TYPE2_SALTER,
            self::AUX_INPUT_TYPE2_REEFER,
            self::AUX_INPUT_TYPE2_DOOR,
            self::AUX_INPUT_TYPE2_BOOM,
            self::AUX_INPUT_TYPE2_AUXILIARY_ENGINE,
            self::AUX_INPUT_TYPE2_GENERATOR,
            self::AUX_INPUT_TYPE2_EIGHT_WAY_LIGHTS,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHarshAccelerationSettingTypeAllowableValues()
    {
        return [
            self::HARSH_ACCELERATION_SETTING_TYPE_PASSENGER_CAR,
            self::HARSH_ACCELERATION_SETTING_TYPE_LIGHT_TRUCK,
            self::HARSH_ACCELERATION_SETTING_TYPE_HEAVY_DUTY,
            self::HARSH_ACCELERATION_SETTING_TYPE_OFF,
            self::HARSH_ACCELERATION_SETTING_TYPE_AUTOMATIC,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aux_input_type1'] = isset($data['aux_input_type1']) ? $data['aux_input_type1'] : null;
        $this->container['aux_input_type2'] = isset($data['aux_input_type2']) ? $data['aux_input_type2'] : null;
        $this->container['external_ids'] = isset($data['external_ids']) ? $data['external_ids'] : null;
        $this->container['harsh_acceleration_setting_type'] = isset($data['harsh_acceleration_setting_type']) ? $data['harsh_acceleration_setting_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['license_plate'] = isset($data['license_plate']) ? $data['license_plate'] : null;
        $this->container['make'] = isset($data['make']) ? $data['make'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['static_assigned_driver'] = isset($data['static_assigned_driver']) ? $data['static_assigned_driver'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAuxInputType1AllowableValues();
        if (!is_null($this->container['aux_input_type1']) && !in_array($this->container['aux_input_type1'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'aux_input_type1', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getAuxInputType2AllowableValues();
        if (!is_null($this->container['aux_input_type2']) && !in_array($this->container['aux_input_type2'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'aux_input_type2', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getHarshAccelerationSettingTypeAllowableValues();
        if (!is_null($this->container['harsh_acceleration_setting_type']) && !in_array($this->container['harsh_acceleration_setting_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'harsh_acceleration_setting_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (!is_null($this->container['license_plate']) && (mb_strlen($this->container['license_plate']) > 12)) {
            $invalidProperties[] = "invalid value for 'license_plate', the character length must be smaller than or equal to 12.";
        }

        if (!is_null($this->container['make']) && (mb_strlen($this->container['make']) > 255)) {
            $invalidProperties[] = "invalid value for 'make', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['model']) && (mb_strlen($this->container['model']) > 255)) {
            $invalidProperties[] = "invalid value for 'model', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['notes']) && (mb_strlen($this->container['notes']) > 255)) {
            $invalidProperties[] = "invalid value for 'notes', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['vin']) && (mb_strlen($this->container['vin']) > 17)) {
            $invalidProperties[] = "invalid value for 'vin', the character length must be smaller than or equal to 17.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aux_input_type1
     *
     * @return string
     */
    public function getAuxInputType1()
    {
        return $this->container['aux_input_type1'];
    }

    /**
     * Sets aux_input_type1
     *
     * @param string $aux_input_type1 The type of aux input that this vehicle has connected to port 1. Setting to \"none\" will remove the configured aux input.
     *
     * @return $this
     */
    public function setAuxInputType1($aux_input_type1)
    {
        $allowedValues = $this->getAuxInputType1AllowableValues();
        if (!is_null($aux_input_type1) && !in_array($aux_input_type1, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'aux_input_type1', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aux_input_type1'] = $aux_input_type1;

        return $this;
    }

    /**
     * Gets aux_input_type2
     *
     * @return string
     */
    public function getAuxInputType2()
    {
        return $this->container['aux_input_type2'];
    }

    /**
     * Sets aux_input_type2
     *
     * @param string $aux_input_type2 The type of aux input that this vehicle has connected to port 2. Setting to \"none\" will remove the configured aux input.
     *
     * @return $this
     */
    public function setAuxInputType2($aux_input_type2)
    {
        $allowedValues = $this->getAuxInputType2AllowableValues();
        if (!is_null($aux_input_type2) && !in_array($aux_input_type2, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'aux_input_type2', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['aux_input_type2'] = $aux_input_type2;

        return $this;
    }

    /**
     * Gets external_ids
     *
     * @return \Samsara\Php\Client\Model\ExternalIds
     */
    public function getExternalIds()
    {
        return $this->container['external_ids'];
    }

    /**
     * Sets external_ids
     *
     * @param \Samsara\Php\Client\Model\ExternalIds $external_ids external_ids
     *
     * @return $this
     */
    public function setExternalIds($external_ids)
    {
        $this->container['external_ids'] = $external_ids;

        return $this;
    }

    /**
     * Gets harsh_acceleration_setting_type
     *
     * @return string
     */
    public function getHarshAccelerationSettingType()
    {
        return $this->container['harsh_acceleration_setting_type'];
    }

    /**
     * Sets harsh_acceleration_setting_type
     *
     * @param string $harsh_acceleration_setting_type Enumeration of the harsh acceleration setting types. This setting influences the acceleration sensitivity from which a harsh event is triggered. If set to `off`, then no acceleration based harsh events are triggered for the vehicle.
     *
     * @return $this
     */
    public function setHarshAccelerationSettingType($harsh_acceleration_setting_type)
    {
        $allowedValues = $this->getHarshAccelerationSettingTypeAllowableValues();
        if (!is_null($harsh_acceleration_setting_type) && !in_array($harsh_acceleration_setting_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'harsh_acceleration_setting_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['harsh_acceleration_setting_type'] = $harsh_acceleration_setting_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Unique Samsara ID for the vehicle.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets license_plate
     *
     * @return string
     */
    public function getLicensePlate()
    {
        return $this->container['license_plate'];
    }

    /**
     * Sets license_plate
     *
     * @param string $license_plate The license plate of this vehicle.
     *
     * @return $this
     */
    public function setLicensePlate($license_plate)
    {
        if (!is_null($license_plate) && (mb_strlen($license_plate) > 12)) {
            throw new \InvalidArgumentException('invalid length for $license_plate when calling VehicleResponse., must be smaller than or equal to 12.');
        }

        $this->container['license_plate'] = $license_plate;

        return $this;
    }

    /**
     * Gets make
     *
     * @return string
     */
    public function getMake()
    {
        return $this->container['make'];
    }

    /**
     * Sets make
     *
     * @param string $make Vehicle's manufacturing make.
     *
     * @return $this
     */
    public function setMake($make)
    {
        if (!is_null($make) && (mb_strlen($make) > 255)) {
            throw new \InvalidArgumentException('invalid length for $make when calling VehicleResponse., must be smaller than or equal to 255.');
        }

        $this->container['make'] = $make;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model Vehicle's manufacturing model.
     *
     * @return $this
     */
    public function setModel($model)
    {
        if (!is_null($model) && (mb_strlen($model) > 255)) {
            throw new \InvalidArgumentException('invalid length for $model when calling VehicleResponse., must be smaller than or equal to 255.');
        }

        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the vehicle.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Notes about a vehicle. Samsara supports a maximum of 255 chars.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        if (!is_null($notes) && (mb_strlen($notes) > 255)) {
            throw new \InvalidArgumentException('invalid length for $notes when calling VehicleResponse., must be smaller than or equal to 255.');
        }

        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets static_assigned_driver
     *
     * @return \Samsara\Php\Client\Model\DriverTinyResponse
     */
    public function getStaticAssignedDriver()
    {
        return $this->container['static_assigned_driver'];
    }

    /**
     * Sets static_assigned_driver
     *
     * @param \Samsara\Php\Client\Model\DriverTinyResponse $static_assigned_driver static_assigned_driver
     *
     * @return $this
     */
    public function setStaticAssignedDriver($static_assigned_driver)
    {
        $this->container['static_assigned_driver'] = $static_assigned_driver;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Samsara\Php\Client\Model\TagTinyResponse[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Samsara\Php\Client\Model\TagTinyResponse[] $tags An array of all tag mini-objects that are associated with the given vehicle.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin A vehicle identification number.
     *
     * @return $this
     */
    public function setVin($vin)
    {
        if (!is_null($vin) && (mb_strlen($vin) > 17)) {
            throw new \InvalidArgumentException('invalid length for $vin when calling VehicleResponse., must be smaller than or equal to 17.');
        }

        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets year
     *
     * @return string
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string $year Vehicle's manufacturing year.
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


