<?php
/**
 * Driver
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * Driver Class Doc Comment
 *
 * @category Class
 * @description A driver object
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Driver implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Driver';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'carrier_settings' => '\Samsara\Php\Client\Model\DriverBaseCarrierSettings',
'eld_adverse_weather_exemption_enabled' => 'bool',
'eld_big_day_exemption_enabled' => 'bool',
'eld_day_start_hour' => 'int',
'eld_exempt' => 'bool',
'eld_exempt_reason' => 'string',
'eld_pc_enabled' => 'bool',
'eld_ym_enabled' => 'bool',
'external_ids' => '\Samsara\Php\Client\Model\ExternalIds',
'is_deactivated' => 'bool',
'license_number' => 'string',
'license_state' => 'string',
'locale' => 'string',
'name' => 'string',
'notes' => 'string',
'phone' => 'string',
'timezone' => 'string',
'username' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'carrier_settings' => null,
'eld_adverse_weather_exemption_enabled' => null,
'eld_big_day_exemption_enabled' => null,
'eld_day_start_hour' => null,
'eld_exempt' => null,
'eld_exempt_reason' => null,
'eld_pc_enabled' => null,
'eld_ym_enabled' => null,
'external_ids' => null,
'is_deactivated' => null,
'license_number' => null,
'license_state' => null,
'locale' => null,
'name' => null,
'notes' => null,
'phone' => null,
'timezone' => null,
'username' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'carrier_settings' => 'carrierSettings',
'eld_adverse_weather_exemption_enabled' => 'eldAdverseWeatherExemptionEnabled',
'eld_big_day_exemption_enabled' => 'eldBigDayExemptionEnabled',
'eld_day_start_hour' => 'eldDayStartHour',
'eld_exempt' => 'eldExempt',
'eld_exempt_reason' => 'eldExemptReason',
'eld_pc_enabled' => 'eldPcEnabled',
'eld_ym_enabled' => 'eldYmEnabled',
'external_ids' => 'externalIds',
'is_deactivated' => 'isDeactivated',
'license_number' => 'licenseNumber',
'license_state' => 'licenseState',
'locale' => 'locale',
'name' => 'name',
'notes' => 'notes',
'phone' => 'phone',
'timezone' => 'timezone',
'username' => 'username'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'carrier_settings' => 'setCarrierSettings',
'eld_adverse_weather_exemption_enabled' => 'setEldAdverseWeatherExemptionEnabled',
'eld_big_day_exemption_enabled' => 'setEldBigDayExemptionEnabled',
'eld_day_start_hour' => 'setEldDayStartHour',
'eld_exempt' => 'setEldExempt',
'eld_exempt_reason' => 'setEldExemptReason',
'eld_pc_enabled' => 'setEldPcEnabled',
'eld_ym_enabled' => 'setEldYmEnabled',
'external_ids' => 'setExternalIds',
'is_deactivated' => 'setIsDeactivated',
'license_number' => 'setLicenseNumber',
'license_state' => 'setLicenseState',
'locale' => 'setLocale',
'name' => 'setName',
'notes' => 'setNotes',
'phone' => 'setPhone',
'timezone' => 'setTimezone',
'username' => 'setUsername'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'carrier_settings' => 'getCarrierSettings',
'eld_adverse_weather_exemption_enabled' => 'getEldAdverseWeatherExemptionEnabled',
'eld_big_day_exemption_enabled' => 'getEldBigDayExemptionEnabled',
'eld_day_start_hour' => 'getEldDayStartHour',
'eld_exempt' => 'getEldExempt',
'eld_exempt_reason' => 'getEldExemptReason',
'eld_pc_enabled' => 'getEldPcEnabled',
'eld_ym_enabled' => 'getEldYmEnabled',
'external_ids' => 'getExternalIds',
'is_deactivated' => 'getIsDeactivated',
'license_number' => 'getLicenseNumber',
'license_state' => 'getLicenseState',
'locale' => 'getLocale',
'name' => 'getName',
'notes' => 'getNotes',
'phone' => 'getPhone',
'timezone' => 'getTimezone',
'username' => 'getUsername'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LOCALE_US = 'us';
const LOCALE_AT = 'at';
const LOCALE_BE = 'be';
const LOCALE_CA = 'ca';
const LOCALE_GB = 'gb';
const LOCALE_FR = 'fr';
const LOCALE_DE = 'de';
const LOCALE_IE = 'ie';
const LOCALE_IT = 'it';
const LOCALE_LU = 'lu';
const LOCALE_MX = 'mx';
const LOCALE_ES = 'es';
const LOCALE_CH = 'ch';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocaleAllowableValues()
    {
        return [
            self::LOCALE_US,
self::LOCALE_AT,
self::LOCALE_BE,
self::LOCALE_CA,
self::LOCALE_GB,
self::LOCALE_FR,
self::LOCALE_DE,
self::LOCALE_IE,
self::LOCALE_IT,
self::LOCALE_LU,
self::LOCALE_MX,
self::LOCALE_ES,
self::LOCALE_CH,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['carrier_settings'] = isset($data['carrier_settings']) ? $data['carrier_settings'] : null;
        $this->container['eld_adverse_weather_exemption_enabled'] = isset($data['eld_adverse_weather_exemption_enabled']) ? $data['eld_adverse_weather_exemption_enabled'] : null;
        $this->container['eld_big_day_exemption_enabled'] = isset($data['eld_big_day_exemption_enabled']) ? $data['eld_big_day_exemption_enabled'] : null;
        $this->container['eld_day_start_hour'] = isset($data['eld_day_start_hour']) ? $data['eld_day_start_hour'] : null;
        $this->container['eld_exempt'] = isset($data['eld_exempt']) ? $data['eld_exempt'] : null;
        $this->container['eld_exempt_reason'] = isset($data['eld_exempt_reason']) ? $data['eld_exempt_reason'] : null;
        $this->container['eld_pc_enabled'] = isset($data['eld_pc_enabled']) ? $data['eld_pc_enabled'] : false;
        $this->container['eld_ym_enabled'] = isset($data['eld_ym_enabled']) ? $data['eld_ym_enabled'] : false;
        $this->container['external_ids'] = isset($data['external_ids']) ? $data['external_ids'] : null;
        $this->container['is_deactivated'] = isset($data['is_deactivated']) ? $data['is_deactivated'] : null;
        $this->container['license_number'] = isset($data['license_number']) ? $data['license_number'] : null;
        $this->container['license_state'] = isset($data['license_state']) ? $data['license_state'] : null;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($this->container['locale']) && !in_array($this->container['locale'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'locale', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets carrier_settings
     *
     * @return \Samsara\Php\Client\Model\DriverBaseCarrierSettings
     */
    public function getCarrierSettings()
    {
        return $this->container['carrier_settings'];
    }

    /**
     * Sets carrier_settings
     *
     * @param \Samsara\Php\Client\Model\DriverBaseCarrierSettings $carrier_settings carrier_settings
     *
     * @return $this
     */
    public function setCarrierSettings($carrier_settings)
    {
        $this->container['carrier_settings'] = $carrier_settings;

        return $this;
    }

    /**
     * Gets eld_adverse_weather_exemption_enabled
     *
     * @return bool
     */
    public function getEldAdverseWeatherExemptionEnabled()
    {
        return $this->container['eld_adverse_weather_exemption_enabled'];
    }

    /**
     * Sets eld_adverse_weather_exemption_enabled
     *
     * @param bool $eld_adverse_weather_exemption_enabled Flag indicating this driver may use Adverse Weather exemptions in ELD logs.
     *
     * @return $this
     */
    public function setEldAdverseWeatherExemptionEnabled($eld_adverse_weather_exemption_enabled)
    {
        $this->container['eld_adverse_weather_exemption_enabled'] = $eld_adverse_weather_exemption_enabled;

        return $this;
    }

    /**
     * Gets eld_big_day_exemption_enabled
     *
     * @return bool
     */
    public function getEldBigDayExemptionEnabled()
    {
        return $this->container['eld_big_day_exemption_enabled'];
    }

    /**
     * Sets eld_big_day_exemption_enabled
     *
     * @param bool $eld_big_day_exemption_enabled Flag indicating this driver may use Big Day exemption in ELD logs.
     *
     * @return $this
     */
    public function setEldBigDayExemptionEnabled($eld_big_day_exemption_enabled)
    {
        $this->container['eld_big_day_exemption_enabled'] = $eld_big_day_exemption_enabled;

        return $this;
    }

    /**
     * Gets eld_day_start_hour
     *
     * @return int
     */
    public function getEldDayStartHour()
    {
        return $this->container['eld_day_start_hour'];
    }

    /**
     * Sets eld_day_start_hour
     *
     * @param int $eld_day_start_hour `0` indicating midnight-to-midnight ELD driving hours, `12` to indicate noon-to-noon driving hours.
     *
     * @return $this
     */
    public function setEldDayStartHour($eld_day_start_hour)
    {
        $this->container['eld_day_start_hour'] = $eld_day_start_hour;

        return $this;
    }

    /**
     * Gets eld_exempt
     *
     * @return bool
     */
    public function getEldExempt()
    {
        return $this->container['eld_exempt'];
    }

    /**
     * Sets eld_exempt
     *
     * @param bool $eld_exempt Flag indicating this driver is exempt from the Electronic Logging Mandate.
     *
     * @return $this
     */
    public function setEldExempt($eld_exempt)
    {
        $this->container['eld_exempt'] = $eld_exempt;

        return $this;
    }

    /**
     * Gets eld_exempt_reason
     *
     * @return string
     */
    public function getEldExemptReason()
    {
        return $this->container['eld_exempt_reason'];
    }

    /**
     * Sets eld_exempt_reason
     *
     * @param string $eld_exempt_reason Reason that this driver is exempt from the Electronic Logging Mandate (see eldExempt).
     *
     * @return $this
     */
    public function setEldExemptReason($eld_exempt_reason)
    {
        $this->container['eld_exempt_reason'] = $eld_exempt_reason;

        return $this;
    }

    /**
     * Gets eld_pc_enabled
     *
     * @return bool
     */
    public function getEldPcEnabled()
    {
        return $this->container['eld_pc_enabled'];
    }

    /**
     * Sets eld_pc_enabled
     *
     * @param bool $eld_pc_enabled Flag indicating this driver may select the Personal Conveyance duty status in ELD logs.
     *
     * @return $this
     */
    public function setEldPcEnabled($eld_pc_enabled)
    {
        $this->container['eld_pc_enabled'] = $eld_pc_enabled;

        return $this;
    }

    /**
     * Gets eld_ym_enabled
     *
     * @return bool
     */
    public function getEldYmEnabled()
    {
        return $this->container['eld_ym_enabled'];
    }

    /**
     * Sets eld_ym_enabled
     *
     * @param bool $eld_ym_enabled Flag indicating this driver may select the Yard Move duty status in ELD logs.
     *
     * @return $this
     */
    public function setEldYmEnabled($eld_ym_enabled)
    {
        $this->container['eld_ym_enabled'] = $eld_ym_enabled;

        return $this;
    }

    /**
     * Gets external_ids
     *
     * @return \Samsara\Php\Client\Model\ExternalIds
     */
    public function getExternalIds()
    {
        return $this->container['external_ids'];
    }

    /**
     * Sets external_ids
     *
     * @param \Samsara\Php\Client\Model\ExternalIds $external_ids external_ids
     *
     * @return $this
     */
    public function setExternalIds($external_ids)
    {
        $this->container['external_ids'] = $external_ids;

        return $this;
    }

    /**
     * Gets is_deactivated
     *
     * @return bool
     */
    public function getIsDeactivated()
    {
        return $this->container['is_deactivated'];
    }

    /**
     * Sets is_deactivated
     *
     * @param bool $is_deactivated A boolean that indicates whether or not this driver is deactivated.
     *
     * @return $this
     */
    public function setIsDeactivated($is_deactivated)
    {
        $this->container['is_deactivated'] = $is_deactivated;

        return $this;
    }

    /**
     * Gets license_number
     *
     * @return string
     */
    public function getLicenseNumber()
    {
        return $this->container['license_number'];
    }

    /**
     * Sets license_number
     *
     * @param string $license_number Driver's state issued license number. The combination of this number and `licenseState` must be unique.
     *
     * @return $this
     */
    public function setLicenseNumber($license_number)
    {
        $this->container['license_number'] = $license_number;

        return $this;
    }

    /**
     * Gets license_state
     *
     * @return string
     */
    public function getLicenseState()
    {
        return $this->container['license_state'];
    }

    /**
     * Sets license_state
     *
     * @param string $license_state Abbreviation of state that issued driver's license.
     *
     * @return $this
     */
    public function setLicenseState($license_state)
    {
        $this->container['license_state'] = $license_state;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string $locale Locale override (uncommon).
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $allowedValues = $this->getLocaleAllowableValues();
        if (!is_null($locale) && !in_array($locale, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'locale', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Driver's name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Notes about the driver.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Driver's phone number.
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Home terminal timezone, in order to indicate what time zone should be used to calculate the ELD logs.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username Driver's login username into the driver app. The username may not contain spaces or the '@' symbol. The username must be unique.
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
