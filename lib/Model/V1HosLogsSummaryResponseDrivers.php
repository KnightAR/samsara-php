<?php
/**
 * V1HosLogsSummaryResponseDrivers
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * V1HosLogsSummaryResponseDrivers Class Doc Comment
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1HosLogsSummaryResponseDrivers implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V1HosLogsSummaryResponse_drivers';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'current_duty_status_code' => 'string',
'cycle_remaining' => 'int',
'cycle_tomorrow' => 'int',
'drive_ms_today' => 'float',
'driver_id' => 'int',
'driver_name' => 'string',
'driving_in_violation_cycle' => 'int',
'driving_in_violation_today' => 'int',
'on_duty_ms_today' => 'float',
'pending_drive_ms_today' => 'float',
'pending_on_duty_ms_today' => 'float',
'shift_drive_remaining' => 'int',
'shift_remaining' => 'int',
'time_in_current_status' => 'int',
'time_until_break' => 'int',
'vehicle_name' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'current_duty_status_code' => null,
'cycle_remaining' => 'int64',
'cycle_tomorrow' => 'int64',
'drive_ms_today' => 'int64',
'driver_id' => 'int64',
'driver_name' => null,
'driving_in_violation_cycle' => 'int64',
'driving_in_violation_today' => 'int64',
'on_duty_ms_today' => 'int64',
'pending_drive_ms_today' => 'int64',
'pending_on_duty_ms_today' => 'int64',
'shift_drive_remaining' => 'int64',
'shift_remaining' => 'int64',
'time_in_current_status' => 'int64',
'time_until_break' => 'int64',
'vehicle_name' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'current_duty_status_code' => 'currentDutyStatusCode',
'cycle_remaining' => 'cycleRemaining',
'cycle_tomorrow' => 'cycleTomorrow',
'drive_ms_today' => 'driveMsToday',
'driver_id' => 'driverId',
'driver_name' => 'driverName',
'driving_in_violation_cycle' => 'drivingInViolationCycle',
'driving_in_violation_today' => 'drivingInViolationToday',
'on_duty_ms_today' => 'onDutyMsToday',
'pending_drive_ms_today' => 'pendingDriveMsToday',
'pending_on_duty_ms_today' => 'pendingOnDutyMsToday',
'shift_drive_remaining' => 'shiftDriveRemaining',
'shift_remaining' => 'shiftRemaining',
'time_in_current_status' => 'timeInCurrentStatus',
'time_until_break' => 'timeUntilBreak',
'vehicle_name' => 'vehicleName'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'current_duty_status_code' => 'setCurrentDutyStatusCode',
'cycle_remaining' => 'setCycleRemaining',
'cycle_tomorrow' => 'setCycleTomorrow',
'drive_ms_today' => 'setDriveMsToday',
'driver_id' => 'setDriverId',
'driver_name' => 'setDriverName',
'driving_in_violation_cycle' => 'setDrivingInViolationCycle',
'driving_in_violation_today' => 'setDrivingInViolationToday',
'on_duty_ms_today' => 'setOnDutyMsToday',
'pending_drive_ms_today' => 'setPendingDriveMsToday',
'pending_on_duty_ms_today' => 'setPendingOnDutyMsToday',
'shift_drive_remaining' => 'setShiftDriveRemaining',
'shift_remaining' => 'setShiftRemaining',
'time_in_current_status' => 'setTimeInCurrentStatus',
'time_until_break' => 'setTimeUntilBreak',
'vehicle_name' => 'setVehicleName'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'current_duty_status_code' => 'getCurrentDutyStatusCode',
'cycle_remaining' => 'getCycleRemaining',
'cycle_tomorrow' => 'getCycleTomorrow',
'drive_ms_today' => 'getDriveMsToday',
'driver_id' => 'getDriverId',
'driver_name' => 'getDriverName',
'driving_in_violation_cycle' => 'getDrivingInViolationCycle',
'driving_in_violation_today' => 'getDrivingInViolationToday',
'on_duty_ms_today' => 'getOnDutyMsToday',
'pending_drive_ms_today' => 'getPendingDriveMsToday',
'pending_on_duty_ms_today' => 'getPendingOnDutyMsToday',
'shift_drive_remaining' => 'getShiftDriveRemaining',
'shift_remaining' => 'getShiftRemaining',
'time_in_current_status' => 'getTimeInCurrentStatus',
'time_until_break' => 'getTimeUntilBreak',
'vehicle_name' => 'getVehicleName'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CURRENT_DUTY_STATUS_CODE_AUTO_DUTY = 'AUTO_DUTY';
const CURRENT_DUTY_STATUS_CODE_DRIVING = 'DRIVING';
const CURRENT_DUTY_STATUS_CODE_OFF_DUTY = 'OFF_DUTY';
const CURRENT_DUTY_STATUS_CODE_ON_DUTY = 'ON_DUTY';
const CURRENT_DUTY_STATUS_CODE_PERSONAL_CONVEYANCE = 'PERSONAL_CONVEYANCE';
const CURRENT_DUTY_STATUS_CODE_SLEEPER_BED = 'SLEEPER_BED';
const CURRENT_DUTY_STATUS_CODE_YARD_MOVE = 'YARD_MOVE';
const CURRENT_DUTY_STATUS_CODE_WAITING_TIME = 'WAITING_TIME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCurrentDutyStatusCodeAllowableValues()
    {
        return [
            self::CURRENT_DUTY_STATUS_CODE_AUTO_DUTY,
self::CURRENT_DUTY_STATUS_CODE_DRIVING,
self::CURRENT_DUTY_STATUS_CODE_OFF_DUTY,
self::CURRENT_DUTY_STATUS_CODE_ON_DUTY,
self::CURRENT_DUTY_STATUS_CODE_PERSONAL_CONVEYANCE,
self::CURRENT_DUTY_STATUS_CODE_SLEEPER_BED,
self::CURRENT_DUTY_STATUS_CODE_YARD_MOVE,
self::CURRENT_DUTY_STATUS_CODE_WAITING_TIME,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['current_duty_status_code'] = isset($data['current_duty_status_code']) ? $data['current_duty_status_code'] : null;
        $this->container['cycle_remaining'] = isset($data['cycle_remaining']) ? $data['cycle_remaining'] : null;
        $this->container['cycle_tomorrow'] = isset($data['cycle_tomorrow']) ? $data['cycle_tomorrow'] : null;
        $this->container['drive_ms_today'] = isset($data['drive_ms_today']) ? $data['drive_ms_today'] : null;
        $this->container['driver_id'] = isset($data['driver_id']) ? $data['driver_id'] : null;
        $this->container['driver_name'] = isset($data['driver_name']) ? $data['driver_name'] : null;
        $this->container['driving_in_violation_cycle'] = isset($data['driving_in_violation_cycle']) ? $data['driving_in_violation_cycle'] : null;
        $this->container['driving_in_violation_today'] = isset($data['driving_in_violation_today']) ? $data['driving_in_violation_today'] : null;
        $this->container['on_duty_ms_today'] = isset($data['on_duty_ms_today']) ? $data['on_duty_ms_today'] : null;
        $this->container['pending_drive_ms_today'] = isset($data['pending_drive_ms_today']) ? $data['pending_drive_ms_today'] : null;
        $this->container['pending_on_duty_ms_today'] = isset($data['pending_on_duty_ms_today']) ? $data['pending_on_duty_ms_today'] : null;
        $this->container['shift_drive_remaining'] = isset($data['shift_drive_remaining']) ? $data['shift_drive_remaining'] : null;
        $this->container['shift_remaining'] = isset($data['shift_remaining']) ? $data['shift_remaining'] : null;
        $this->container['time_in_current_status'] = isset($data['time_in_current_status']) ? $data['time_in_current_status'] : null;
        $this->container['time_until_break'] = isset($data['time_until_break']) ? $data['time_until_break'] : null;
        $this->container['vehicle_name'] = isset($data['vehicle_name']) ? $data['vehicle_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCurrentDutyStatusCodeAllowableValues();
        if (!is_null($this->container['current_duty_status_code']) && !in_array($this->container['current_duty_status_code'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'current_duty_status_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets current_duty_status_code
     *
     * @return string
     */
    public function getCurrentDutyStatusCode()
    {
        return $this->container['current_duty_status_code'];
    }

    /**
     * Sets current_duty_status_code
     *
     * @param string $current_duty_status_code The Hours of Service status type.
     *
     * @return $this
     */
    public function setCurrentDutyStatusCode($current_duty_status_code)
    {
        $allowedValues = $this->getCurrentDutyStatusCodeAllowableValues();
        if (!is_null($current_duty_status_code) && !in_array($current_duty_status_code, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'current_duty_status_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['current_duty_status_code'] = $current_duty_status_code;

        return $this;
    }

    /**
     * Gets cycle_remaining
     *
     * @return int
     */
    public function getCycleRemaining()
    {
        return $this->container['cycle_remaining'];
    }

    /**
     * Sets cycle_remaining
     *
     * @param int $cycle_remaining The amount of remaining cycle time (in ms).
     *
     * @return $this
     */
    public function setCycleRemaining($cycle_remaining)
    {
        $this->container['cycle_remaining'] = $cycle_remaining;

        return $this;
    }

    /**
     * Gets cycle_tomorrow
     *
     * @return int
     */
    public function getCycleTomorrow()
    {
        return $this->container['cycle_tomorrow'];
    }

    /**
     * Sets cycle_tomorrow
     *
     * @param int $cycle_tomorrow The amount of cycle time (in ms) available tomorrow.
     *
     * @return $this
     */
    public function setCycleTomorrow($cycle_tomorrow)
    {
        $this->container['cycle_tomorrow'] = $cycle_tomorrow;

        return $this;
    }

    /**
     * Gets drive_ms_today
     *
     * @return float
     */
    public function getDriveMsToday()
    {
        return $this->container['drive_ms_today'];
    }

    /**
     * Sets drive_ms_today
     *
     * @param float $drive_ms_today The amount of driving time today (in ms).
     *
     * @return $this
     */
    public function setDriveMsToday($drive_ms_today)
    {
        $this->container['drive_ms_today'] = $drive_ms_today;

        return $this;
    }

    /**
     * Gets driver_id
     *
     * @return int
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param int $driver_id ID of the driver.
     *
     * @return $this
     */
    public function setDriverId($driver_id)
    {
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets driver_name
     *
     * @return string
     */
    public function getDriverName()
    {
        return $this->container['driver_name'];
    }

    /**
     * Sets driver_name
     *
     * @param string $driver_name Name of the driver.
     *
     * @return $this
     */
    public function setDriverName($driver_name)
    {
        $this->container['driver_name'] = $driver_name;

        return $this;
    }

    /**
     * Gets driving_in_violation_cycle
     *
     * @return int
     */
    public function getDrivingInViolationCycle()
    {
        return $this->container['driving_in_violation_cycle'];
    }

    /**
     * Sets driving_in_violation_cycle
     *
     * @param int $driving_in_violation_cycle The amount of driving time in violation in this cycle (in ms).
     *
     * @return $this
     */
    public function setDrivingInViolationCycle($driving_in_violation_cycle)
    {
        $this->container['driving_in_violation_cycle'] = $driving_in_violation_cycle;

        return $this;
    }

    /**
     * Gets driving_in_violation_today
     *
     * @return int
     */
    public function getDrivingInViolationToday()
    {
        return $this->container['driving_in_violation_today'];
    }

    /**
     * Sets driving_in_violation_today
     *
     * @param int $driving_in_violation_today The amount of driving time in violation today (in ms).
     *
     * @return $this
     */
    public function setDrivingInViolationToday($driving_in_violation_today)
    {
        $this->container['driving_in_violation_today'] = $driving_in_violation_today;

        return $this;
    }

    /**
     * Gets on_duty_ms_today
     *
     * @return float
     */
    public function getOnDutyMsToday()
    {
        return $this->container['on_duty_ms_today'];
    }

    /**
     * Sets on_duty_ms_today
     *
     * @param float $on_duty_ms_today The amount of on duty time today (in ms).
     *
     * @return $this
     */
    public function setOnDutyMsToday($on_duty_ms_today)
    {
        $this->container['on_duty_ms_today'] = $on_duty_ms_today;

        return $this;
    }

    /**
     * Gets pending_drive_ms_today
     *
     * @return float
     */
    public function getPendingDriveMsToday()
    {
        return $this->container['pending_drive_ms_today'];
    }

    /**
     * Sets pending_drive_ms_today
     *
     * @param float $pending_drive_ms_today The amount of driving time today for pending logs (in ms).
     *
     * @return $this
     */
    public function setPendingDriveMsToday($pending_drive_ms_today)
    {
        $this->container['pending_drive_ms_today'] = $pending_drive_ms_today;

        return $this;
    }

    /**
     * Gets pending_on_duty_ms_today
     *
     * @return float
     */
    public function getPendingOnDutyMsToday()
    {
        return $this->container['pending_on_duty_ms_today'];
    }

    /**
     * Sets pending_on_duty_ms_today
     *
     * @param float $pending_on_duty_ms_today The amount of on duty time today for pending logs (in ms).
     *
     * @return $this
     */
    public function setPendingOnDutyMsToday($pending_on_duty_ms_today)
    {
        $this->container['pending_on_duty_ms_today'] = $pending_on_duty_ms_today;

        return $this;
    }

    /**
     * Gets shift_drive_remaining
     *
     * @return int
     */
    public function getShiftDriveRemaining()
    {
        return $this->container['shift_drive_remaining'];
    }

    /**
     * Sets shift_drive_remaining
     *
     * @param int $shift_drive_remaining The amount of remaining shift drive time (in ms).
     *
     * @return $this
     */
    public function setShiftDriveRemaining($shift_drive_remaining)
    {
        $this->container['shift_drive_remaining'] = $shift_drive_remaining;

        return $this;
    }

    /**
     * Gets shift_remaining
     *
     * @return int
     */
    public function getShiftRemaining()
    {
        return $this->container['shift_remaining'];
    }

    /**
     * Sets shift_remaining
     *
     * @param int $shift_remaining The amount of remaining shift time (in ms).
     *
     * @return $this
     */
    public function setShiftRemaining($shift_remaining)
    {
        $this->container['shift_remaining'] = $shift_remaining;

        return $this;
    }

    /**
     * Gets time_in_current_status
     *
     * @return int
     */
    public function getTimeInCurrentStatus()
    {
        return $this->container['time_in_current_status'];
    }

    /**
     * Sets time_in_current_status
     *
     * @param int $time_in_current_status The amount of time (in ms) that the driver has been in the current `dutyStatus`.
     *
     * @return $this
     */
    public function setTimeInCurrentStatus($time_in_current_status)
    {
        $this->container['time_in_current_status'] = $time_in_current_status;

        return $this;
    }

    /**
     * Gets time_until_break
     *
     * @return int
     */
    public function getTimeUntilBreak()
    {
        return $this->container['time_until_break'];
    }

    /**
     * Sets time_until_break
     *
     * @param int $time_until_break The amount of time (in ms) remaining until the driver cannot drive without a rest break.
     *
     * @return $this
     */
    public function setTimeUntilBreak($time_until_break)
    {
        $this->container['time_until_break'] = $time_until_break;

        return $this;
    }

    /**
     * Gets vehicle_name
     *
     * @return string
     */
    public function getVehicleName()
    {
        return $this->container['vehicle_name'];
    }

    /**
     * Sets vehicle_name
     *
     * @param string $vehicle_name Name of the vehicle.
     *
     * @return $this
     */
    public function setVehicleName($vehicle_name)
    {
        $this->container['vehicle_name'] = $vehicle_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
