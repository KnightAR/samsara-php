<?php
/**
 * V1HosLogsResponseLogs
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * V1HosLogsResponseLogs Class Doc Comment
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1HosLogsResponseLogs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V1HosLogsResponse_logs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'codriver_ids' => 'float[]',
        'driver_id' => 'int',
        'group_id' => 'int',
        'hos_status_type' => 'string',
        'loc_city' => 'string',
        'loc_lat' => 'float',
        'loc_lng' => 'float',
        'loc_name' => 'string',
        'loc_state' => 'string',
        'log_start_ms' => 'int',
        'remark' => 'string',
        'vehicle_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'codriver_ids' => null,
        'driver_id' => 'int64',
        'group_id' => 'int64',
        'hos_status_type' => null,
        'loc_city' => null,
        'loc_lat' => 'float',
        'loc_lng' => 'float',
        'loc_name' => null,
        'loc_state' => null,
        'log_start_ms' => 'int64',
        'remark' => null,
        'vehicle_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'codriver_ids' => 'codriverIds',
        'driver_id' => 'driverId',
        'group_id' => 'groupId',
        'hos_status_type' => 'hosStatusType',
        'loc_city' => 'locCity',
        'loc_lat' => 'locLat',
        'loc_lng' => 'locLng',
        'loc_name' => 'locName',
        'loc_state' => 'locState',
        'log_start_ms' => 'logStartMs',
        'remark' => 'remark',
        'vehicle_id' => 'vehicleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'codriver_ids' => 'setCodriverIds',
        'driver_id' => 'setDriverId',
        'group_id' => 'setGroupId',
        'hos_status_type' => 'setHosStatusType',
        'loc_city' => 'setLocCity',
        'loc_lat' => 'setLocLat',
        'loc_lng' => 'setLocLng',
        'loc_name' => 'setLocName',
        'loc_state' => 'setLocState',
        'log_start_ms' => 'setLogStartMs',
        'remark' => 'setRemark',
        'vehicle_id' => 'setVehicleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'codriver_ids' => 'getCodriverIds',
        'driver_id' => 'getDriverId',
        'group_id' => 'getGroupId',
        'hos_status_type' => 'getHosStatusType',
        'loc_city' => 'getLocCity',
        'loc_lat' => 'getLocLat',
        'loc_lng' => 'getLocLng',
        'loc_name' => 'getLocName',
        'loc_state' => 'getLocState',
        'log_start_ms' => 'getLogStartMs',
        'remark' => 'getRemark',
        'vehicle_id' => 'getVehicleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['codriver_ids'] = isset($data['codriver_ids']) ? $data['codriver_ids'] : null;
        $this->container['driver_id'] = isset($data['driver_id']) ? $data['driver_id'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['hos_status_type'] = isset($data['hos_status_type']) ? $data['hos_status_type'] : null;
        $this->container['loc_city'] = isset($data['loc_city']) ? $data['loc_city'] : null;
        $this->container['loc_lat'] = isset($data['loc_lat']) ? $data['loc_lat'] : null;
        $this->container['loc_lng'] = isset($data['loc_lng']) ? $data['loc_lng'] : null;
        $this->container['loc_name'] = isset($data['loc_name']) ? $data['loc_name'] : null;
        $this->container['loc_state'] = isset($data['loc_state']) ? $data['loc_state'] : null;
        $this->container['log_start_ms'] = isset($data['log_start_ms']) ? $data['log_start_ms'] : null;
        $this->container['remark'] = isset($data['remark']) ? $data['remark'] : null;
        $this->container['vehicle_id'] = isset($data['vehicle_id']) ? $data['vehicle_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets codriver_ids
     *
     * @return float[]
     */
    public function getCodriverIds()
    {
        return $this->container['codriver_ids'];
    }

    /**
     * Sets codriver_ids
     *
     * @param float[] $codriver_ids codriver_ids
     *
     * @return $this
     */
    public function setCodriverIds($codriver_ids)
    {
        $this->container['codriver_ids'] = $codriver_ids;

        return $this;
    }

    /**
     * Gets driver_id
     *
     * @return int
     */
    public function getDriverId()
    {
        return $this->container['driver_id'];
    }

    /**
     * Sets driver_id
     *
     * @param int $driver_id ID of the driver.
     *
     * @return $this
     */
    public function setDriverId($driver_id)
    {
        $this->container['driver_id'] = $driver_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id Deprecated.
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets hos_status_type
     *
     * @return string
     */
    public function getHosStatusType()
    {
        return $this->container['hos_status_type'];
    }

    /**
     * Sets hos_status_type
     *
     * @param string $hos_status_type The Hours of Service status type. One of `OFF_DUTY`, `SLEEPER_BED`, `DRIVING`, `ON_DUTY`, `YARD_MOVE`, `PERSONAL_CONVEYANCE`.
     *
     * @return $this
     */
    public function setHosStatusType($hos_status_type)
    {
        $this->container['hos_status_type'] = $hos_status_type;

        return $this;
    }

    /**
     * Gets loc_city
     *
     * @return string
     */
    public function getLocCity()
    {
        return $this->container['loc_city'];
    }

    /**
     * Sets loc_city
     *
     * @param string $loc_city City in which the log was recorded.
     *
     * @return $this
     */
    public function setLocCity($loc_city)
    {
        $this->container['loc_city'] = $loc_city;

        return $this;
    }

    /**
     * Gets loc_lat
     *
     * @return float
     */
    public function getLocLat()
    {
        return $this->container['loc_lat'];
    }

    /**
     * Sets loc_lat
     *
     * @param float $loc_lat Latitude at which the log was recorded.
     *
     * @return $this
     */
    public function setLocLat($loc_lat)
    {
        $this->container['loc_lat'] = $loc_lat;

        return $this;
    }

    /**
     * Gets loc_lng
     *
     * @return float
     */
    public function getLocLng()
    {
        return $this->container['loc_lng'];
    }

    /**
     * Sets loc_lng
     *
     * @param float $loc_lng Longitude at which the log was recorded.
     *
     * @return $this
     */
    public function setLocLng($loc_lng)
    {
        $this->container['loc_lng'] = $loc_lng;

        return $this;
    }

    /**
     * Gets loc_name
     *
     * @return string
     */
    public function getLocName()
    {
        return $this->container['loc_name'];
    }

    /**
     * Sets loc_name
     *
     * @param string $loc_name Name of location at which the log was recorded.
     *
     * @return $this
     */
    public function setLocName($loc_name)
    {
        $this->container['loc_name'] = $loc_name;

        return $this;
    }

    /**
     * Gets loc_state
     *
     * @return string
     */
    public function getLocState()
    {
        return $this->container['loc_state'];
    }

    /**
     * Sets loc_state
     *
     * @param string $loc_state State in which the log was recorded.
     *
     * @return $this
     */
    public function setLocState($loc_state)
    {
        $this->container['loc_state'] = $loc_state;

        return $this;
    }

    /**
     * Gets log_start_ms
     *
     * @return int
     */
    public function getLogStartMs()
    {
        return $this->container['log_start_ms'];
    }

    /**
     * Sets log_start_ms
     *
     * @param int $log_start_ms The time at which the log/HOS status started in UNIX milliseconds.
     *
     * @return $this
     */
    public function setLogStartMs($log_start_ms)
    {
        $this->container['log_start_ms'] = $log_start_ms;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string $remark Remark associated with the log entry.
     *
     * @return $this
     */
    public function setRemark($remark)
    {
        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets vehicle_id
     *
     * @return int
     */
    public function getVehicleId()
    {
        return $this->container['vehicle_id'];
    }

    /**
     * Sets vehicle_id
     *
     * @param int $vehicle_id ID of the vehicle.
     *
     * @return $this
     */
    public function setVehicleId($vehicle_id)
    {
        $this->container['vehicle_id'] = $vehicle_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


