<?php
/**
 * V1VisionStepResultsInnerDistance
 *
 * PHP version 5
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Samsara API
 *
 * <style type=\"text/css\"> n {     padding: 1em;     width: 100%;     display: block;     margin: 28px 0; } n.info {     background-color: rgba(0, 51, 160, 0.1); } n.warning {     background-color: #fdf6e3; } i:before {     margin-right: 6px; } nh {     font-size: 1.5rem;     font-weight: 700;     line-height: 1.1;     display: block; } nb {     margin-top: 10px;     padding-left: 22px;     display: block; } </style>  # Overview  <n class=\"info\"> <nh> <i class=\"fa fa-info-circle\"></i> Something new! </nh> <nb> Welcome Samsara's new and improved API. Check out our FAQ [here](https://developers.samsara.com/docs/introducing-our-next-generation-api) to see what's changed and learn how to get started.<br> <br> Want to access the legacy API docs? You can find them [here](https://www.samsara.com/api).<br> <br> *Note: Because this is a new set of APIs, we have not transitioned all endpoints over to this standard. Endpoints that still use the legacy standards are indicated in the reference documentation. If you can't find an API that you're looking for, we encourage you to look for it in our [legacy API docs](https://www.samsara.com/api) as we continue to transition all endpoints over. Check back here for updates!*<br> <br> Submit your feedback [here](https://forms.gle/r4bs6HQshQAvBuwv6)! </nb> </n>  Samsara provides API endpoints so that you can build powerful applications and custom solutions with sensor data. Samsara has endpoints available to track and analyze sensors, vehicles, and entire fleets.  The Samsara API is a [RESTful API](https://en.wikipedia.org/wiki/Representational_state_transfer). It uses standard [HTTP](https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol) authentication, verbs, and response codes, and it returns [JSON](http://www.json.org/) response bodies. If you're familiar with what you can build with a REST API, then this will be your go-to API reference.  Visit [developers.samsara.com](https://developers.samsara.com) to find getting started guides and an API overview.  If you have any questions, reach out to us at [support@samsara.com](mailto:support@samsara.com).  ## Endpoints  All our APIs can be accessed through HTTP requests to URLs like:  ``` https://api.samsara.com/<endpoint> ```  For EU customers, this URL will be:  ``` https://api.eu.samsara.com/<endpoint> ```  <n class=\"warning\"> <nh> <i class=\"fa fa-exclamation-circle\"></i> Note </nh> <nb> Legacy endpoints will have the URL: `https://api.samsara.com/v1/<endpoint>` or `https://api.eu.samsara.com/v1/<endpoint>` </nb> </n>  ## Authentication  To authenticate your API request you will need to include your secret token. You can manage your API tokens in the [Dashboard](https://cloud.samsara.com). They are visible under `Settings->Organization->API Tokens`.  Your API tokens carry many privileges, so be sure to keep them secure. Do not share your secret API tokens in publicly accessible areas such as GitHub, client-side code, and so on.  Authentication to the API is performed via Bearer Token in the HTTP Authorization header. Provide your API token as the `access_token` value in an `Authorization: Bearer` header. You do not need to provide a password:  ```curl Authorization: Bearer {access_token} ```  All API requests must be made over [HTTPS](https://en.wikipedia.org/wiki/HTTPS). Calls made over plain HTTP or without authentication will fail.  ## Common Patterns  You can find more info about request methods, response codes, error codes, versioning, pagination, timestamps, and mini-objects [here](https://developers.samsara.com/docs/common-structures).
 *
 * OpenAPI spec version: 2019-09-13-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.13
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Samsara\Php\Client\Model;

use \ArrayAccess;
use \Samsara\Php\Client\ObjectSerializer;

/**
 * V1VisionStepResultsInnerDistance Class Doc Comment
 *
 * @category Class
 * @package  Samsara\Php\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1VisionStepResultsInnerDistance implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'V1VisionStepResults_inner_distance';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'distance_found' => 'int',
'end_step_name' => 'string',
'enforce_offset_angle_range' => 'bool',
'max_distance' => 'int',
'max_offset_angle' => 'int',
'min_distance' => 'int',
'min_offset_angle' => 'int',
'offset_angle_found' => 'int',
'start_step_name' => 'string',
'unit' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'distance_found' => 'float64',
'end_step_name' => null,
'enforce_offset_angle_range' => null,
'max_distance' => 'float64',
'max_offset_angle' => 'int64',
'min_distance' => 'float64',
'min_offset_angle' => 'int64',
'offset_angle_found' => 'int64',
'start_step_name' => null,
'unit' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'distance_found' => 'distanceFound',
'end_step_name' => 'endStepName',
'enforce_offset_angle_range' => 'enforceOffsetAngleRange',
'max_distance' => 'maxDistance',
'max_offset_angle' => 'maxOffsetAngle',
'min_distance' => 'minDistance',
'min_offset_angle' => 'minOffsetAngle',
'offset_angle_found' => 'offsetAngleFound',
'start_step_name' => 'startStepName',
'unit' => 'unit'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'distance_found' => 'setDistanceFound',
'end_step_name' => 'setEndStepName',
'enforce_offset_angle_range' => 'setEnforceOffsetAngleRange',
'max_distance' => 'setMaxDistance',
'max_offset_angle' => 'setMaxOffsetAngle',
'min_distance' => 'setMinDistance',
'min_offset_angle' => 'setMinOffsetAngle',
'offset_angle_found' => 'setOffsetAngleFound',
'start_step_name' => 'setStartStepName',
'unit' => 'setUnit'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'distance_found' => 'getDistanceFound',
'end_step_name' => 'getEndStepName',
'enforce_offset_angle_range' => 'getEnforceOffsetAngleRange',
'max_distance' => 'getMaxDistance',
'max_offset_angle' => 'getMaxOffsetAngle',
'min_distance' => 'getMinDistance',
'min_offset_angle' => 'getMinOffsetAngle',
'offset_angle_found' => 'getOffsetAngleFound',
'start_step_name' => 'getStartStepName',
'unit' => 'getUnit'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['distance_found'] = isset($data['distance_found']) ? $data['distance_found'] : null;
        $this->container['end_step_name'] = isset($data['end_step_name']) ? $data['end_step_name'] : null;
        $this->container['enforce_offset_angle_range'] = isset($data['enforce_offset_angle_range']) ? $data['enforce_offset_angle_range'] : null;
        $this->container['max_distance'] = isset($data['max_distance']) ? $data['max_distance'] : null;
        $this->container['max_offset_angle'] = isset($data['max_offset_angle']) ? $data['max_offset_angle'] : null;
        $this->container['min_distance'] = isset($data['min_distance']) ? $data['min_distance'] : null;
        $this->container['min_offset_angle'] = isset($data['min_offset_angle']) ? $data['min_offset_angle'] : null;
        $this->container['offset_angle_found'] = isset($data['offset_angle_found']) ? $data['offset_angle_found'] : null;
        $this->container['start_step_name'] = isset($data['start_step_name']) ? $data['start_step_name'] : null;
        $this->container['unit'] = isset($data['unit']) ? $data['unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets distance_found
     *
     * @return int
     */
    public function getDistanceFound()
    {
        return $this->container['distance_found'];
    }

    /**
     * Sets distance_found
     *
     * @param int $distance_found The distance found between the start and end references
     *
     * @return $this
     */
    public function setDistanceFound($distance_found)
    {
        $this->container['distance_found'] = $distance_found;

        return $this;
    }

    /**
     * Gets end_step_name
     *
     * @return string
     */
    public function getEndStepName()
    {
        return $this->container['end_step_name'];
    }

    /**
     * Sets end_step_name
     *
     * @param string $end_step_name The name of the second reference step that we're checking the distances between
     *
     * @return $this
     */
    public function setEndStepName($end_step_name)
    {
        $this->container['end_step_name'] = $end_step_name;

        return $this;
    }

    /**
     * Gets enforce_offset_angle_range
     *
     * @return bool
     */
    public function getEnforceOffsetAngleRange()
    {
        return $this->container['enforce_offset_angle_range'];
    }

    /**
     * Sets enforce_offset_angle_range
     *
     * @param bool $enforce_offset_angle_range Whether an offset angle range is enforced
     *
     * @return $this
     */
    public function setEnforceOffsetAngleRange($enforce_offset_angle_range)
    {
        $this->container['enforce_offset_angle_range'] = $enforce_offset_angle_range;

        return $this;
    }

    /**
     * Gets max_distance
     *
     * @return int
     */
    public function getMaxDistance()
    {
        return $this->container['max_distance'];
    }

    /**
     * Sets max_distance
     *
     * @param int $max_distance The maximum allowed distance threshold
     *
     * @return $this
     */
    public function setMaxDistance($max_distance)
    {
        $this->container['max_distance'] = $max_distance;

        return $this;
    }

    /**
     * Gets max_offset_angle
     *
     * @return int
     */
    public function getMaxOffsetAngle()
    {
        return $this->container['max_offset_angle'];
    }

    /**
     * Sets max_offset_angle
     *
     * @param int $max_offset_angle The maximum angle allowance (in degrees) if enforceOffsetAngleRange is true
     *
     * @return $this
     */
    public function setMaxOffsetAngle($max_offset_angle)
    {
        $this->container['max_offset_angle'] = $max_offset_angle;

        return $this;
    }

    /**
     * Gets min_distance
     *
     * @return int
     */
    public function getMinDistance()
    {
        return $this->container['min_distance'];
    }

    /**
     * Sets min_distance
     *
     * @param int $min_distance The minumum allowed distance threshold
     *
     * @return $this
     */
    public function setMinDistance($min_distance)
    {
        $this->container['min_distance'] = $min_distance;

        return $this;
    }

    /**
     * Gets min_offset_angle
     *
     * @return int
     */
    public function getMinOffsetAngle()
    {
        return $this->container['min_offset_angle'];
    }

    /**
     * Sets min_offset_angle
     *
     * @param int $min_offset_angle The minimum angle allowance (in degrees) if enforceOffsetAngleRange is true
     *
     * @return $this
     */
    public function setMinOffsetAngle($min_offset_angle)
    {
        $this->container['min_offset_angle'] = $min_offset_angle;

        return $this;
    }

    /**
     * Gets offset_angle_found
     *
     * @return int
     */
    public function getOffsetAngleFound()
    {
        return $this->container['offset_angle_found'];
    }

    /**
     * Sets offset_angle_found
     *
     * @param int $offset_angle_found The counter-clockwise angle (in degrees) found between the horizontal axis of the start reference step and the last
     *
     * @return $this
     */
    public function setOffsetAngleFound($offset_angle_found)
    {
        $this->container['offset_angle_found'] = $offset_angle_found;

        return $this;
    }

    /**
     * Gets start_step_name
     *
     * @return string
     */
    public function getStartStepName()
    {
        return $this->container['start_step_name'];
    }

    /**
     * Sets start_step_name
     *
     * @param string $start_step_name The name of the first reference step that we're checking the distances between
     *
     * @return $this
     */
    public function setStartStepName($start_step_name)
    {
        $this->container['start_step_name'] = $start_step_name;

        return $this;
    }

    /**
     * Gets unit
     *
     * @return string
     */
    public function getUnit()
    {
        return $this->container['unit'];
    }

    /**
     * Sets unit
     *
     * @param string $unit The measurement unit of the distance found and the min and max distance threshold
     *
     * @return $this
     */
    public function setUnit($unit)
    {
        $this->container['unit'] = $unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
